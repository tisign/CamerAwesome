diff --git a/android/src/main/kotlin/com/apparence/camerawesome/cameraX/Pigeon.kt b/android/src/main/kotlin/com/apparence/camerawesome/cameraX/Pigeon.kt
index 340b7e9..81ee2df 100644
--- a/android/src/main/kotlin/com/apparence/camerawesome/cameraX/Pigeon.kt
+++ b/android/src/main/kotlin/com/apparence/camerawesome/cameraX/Pigeon.kt
@@ -1,5 +1,6 @@
-// Autogenerated from Pigeon (v9.2.5), do not edit directly.
+// Autogenerated from Pigeon (v21.2.0), do not edit directly.
 // See also: https://pub.dev/packages/pigeon
+@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")
 
 package com.apparence.camerawesome.cameraX
 
@@ -16,14 +17,14 @@ private fun wrapResult(result: Any?): List<Any?> {
 }
 
 private fun wrapError(exception: Throwable): List<Any?> {
-  if (exception is FlutterError) {
-    return listOf(
+  return if (exception is FlutterError) {
+    listOf(
       exception.code,
       exception.message,
       exception.details
     )
   } else {
-    return listOf(
+    listOf(
       exception.javaClass.simpleName,
       exception.toString(),
       "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
@@ -95,9 +96,9 @@ enum class QualityFallbackStrategy(val raw: Int) {
 }
 
 enum class CupertinoFileType(val raw: Int) {
-  QUICKTIMEMOVIE(0),
+  QUICK_TIME_MOVIE(0),
   MPEG4(1),
-  APPLEM4V(2),
+  APPLE_M4V(2),
   TYPE3GPP(3),
   TYPE3GPP2(4);
 
@@ -111,13 +112,13 @@ enum class CupertinoFileType(val raw: Int) {
 enum class CupertinoCodecType(val raw: Int) {
   H264(0),
   HEVC(1),
-  HEVCWITHALPHA(2),
+  HEVC_WITH_ALPHA(2),
   JPEG(3),
-  APPLEPRORES4444(4),
-  APPLEPRORES422(5),
-  APPLEPRORES422HQ(6),
-  APPLEPRORES422LT(7),
-  APPLEPRORES422PROXY(8);
+  APPLE_PRO_RES4444(4),
+  APPLE_PRO_RES422(5),
+  APPLE_PRO_RES422HQ(6),
+  APPLE_PRO_RES422LT(7),
+  APPLE_PRO_RES422PROXY(8);
 
   companion object {
     fun ofRaw(raw: Int): CupertinoCodecType? {
@@ -132,9 +133,9 @@ enum class PigeonSensorType(val raw: Int) {
    *
    * The wide angle sensor is the default sensor for iOS
    */
-  WIDEANGLE(0),
+  WIDE_ANGLE(0),
   /** A built-in camera with a shorter focal length than that of the wide-angle camera. */
-  ULTRAWIDEANGLE(1),
+  ULTRA_WIDE_ANGLE(1),
   /** A built-in camera device with a longer focal length than the wide-angle camera. */
   TELEPHOTO(2),
   /**
@@ -142,7 +143,7 @@ enum class PigeonSensorType(val raw: Int) {
    *
    * iOS only
    */
-  TRUEDEPTH(3),
+  TRUE_DEPTH(3),
   UNKNOWN(4);
 
   companion object {
@@ -196,18 +197,17 @@ enum class AnalysisRotation(val raw: Int) {
 data class PreviewSize (
   val width: Double,
   val height: Double
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): PreviewSize {
-      val width = list[0] as Double
-      val height = list[1] as Double
+    fun fromList(pigeonVar_list: List<Any?>): PreviewSize {
+      val width = pigeonVar_list[0] as Double
+      val height = pigeonVar_list[1] as Double
       return PreviewSize(width, height)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       width,
       height,
     )
@@ -217,17 +217,16 @@ data class PreviewSize (
 /** Generated class from Pigeon that represents data sent in messages. */
 data class ExifPreferences (
   val saveGPSLocation: Boolean
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): ExifPreferences {
-      val saveGPSLocation = list[0] as Boolean
+    fun fromList(pigeonVar_list: List<Any?>): ExifPreferences {
+      val saveGPSLocation = pigeonVar_list[0] as Boolean
       return ExifPreferences(saveGPSLocation)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       saveGPSLocation,
     )
   }
@@ -238,21 +237,20 @@ data class PigeonSensor (
   val position: PigeonSensorPosition,
   val type: PigeonSensorType,
   val deviceId: String? = null
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): PigeonSensor {
-      val position = PigeonSensorPosition.ofRaw(list[0] as Int)!!
-      val type = PigeonSensorType.ofRaw(list[1] as Int)!!
-      val deviceId = list[2] as String?
+    fun fromList(pigeonVar_list: List<Any?>): PigeonSensor {
+      val position = pigeonVar_list[0] as PigeonSensorPosition
+      val type = pigeonVar_list[1] as PigeonSensorType
+      val deviceId = pigeonVar_list[2] as String?
       return PigeonSensor(position, type, deviceId)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
-      position.raw,
-      type.raw,
+    return listOf(
+      position,
+      type,
       deviceId,
     )
   }
@@ -270,30 +268,23 @@ data class VideoOptions (
   val quality: VideoRecordingQuality? = null,
   val android: AndroidVideoOptions? = null,
   val ios: CupertinoVideoOptions? = null
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): VideoOptions {
-      val enableAudio = list[0] as Boolean
-      val quality: VideoRecordingQuality? = (list[1] as Int?)?.let {
-        VideoRecordingQuality.ofRaw(it)
-      }
-      val android: AndroidVideoOptions? = (list[2] as List<Any?>?)?.let {
-        AndroidVideoOptions.fromList(it)
-      }
-      val ios: CupertinoVideoOptions? = (list[3] as List<Any?>?)?.let {
-        CupertinoVideoOptions.fromList(it)
-      }
+    fun fromList(pigeonVar_list: List<Any?>): VideoOptions {
+      val enableAudio = pigeonVar_list[0] as Boolean
+      val quality = pigeonVar_list[1] as VideoRecordingQuality?
+      val android = pigeonVar_list[2] as AndroidVideoOptions?
+      val ios = pigeonVar_list[3] as CupertinoVideoOptions?
       return VideoOptions(enableAudio, quality, android, ios)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       enableAudio,
-      quality?.raw,
-      android?.toList(),
-      ios?.toList(),
+      quality,
+      android,
+      ios,
     )
   }
 }
@@ -306,22 +297,19 @@ data class AndroidVideoOptions (
    */
   val bitrate: Long? = null,
   val fallbackStrategy: QualityFallbackStrategy? = null
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): AndroidVideoOptions {
-      val bitrate = list[0].let { if (it is Int) it.toLong() else it as Long? }
-      val fallbackStrategy: QualityFallbackStrategy? = (list[1] as Int?)?.let {
-        QualityFallbackStrategy.ofRaw(it)
-      }
+    fun fromList(pigeonVar_list: List<Any?>): AndroidVideoOptions {
+      val bitrate = pigeonVar_list[0].let { num -> if (num is Int) num.toLong() else num as Long? }
+      val fallbackStrategy = pigeonVar_list[1] as QualityFallbackStrategy?
       return AndroidVideoOptions(bitrate, fallbackStrategy)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       bitrate,
-      fallbackStrategy?.raw,
+      fallbackStrategy,
     )
   }
 }
@@ -333,27 +321,26 @@ data class CupertinoVideoOptions (
   /** Specify video codec, defaults to [AVVideoCodecTypeH264]. */
   val codec: CupertinoCodecType? = null,
   /** Specify video fps, defaults to [30]. */
-  val fps: Long? = null
-
-) {
+  val fps: Long? = null,
+  /** Specify video color space, defaults to [AVVideoColorSpaceSRGB]. */
+  val colorSpace: Long? = null
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): CupertinoVideoOptions {
-      val fileType: CupertinoFileType? = (list[0] as Int?)?.let {
-        CupertinoFileType.ofRaw(it)
-      }
-      val codec: CupertinoCodecType? = (list[1] as Int?)?.let {
-        CupertinoCodecType.ofRaw(it)
-      }
-      val fps = list[2].let { if (it is Int) it.toLong() else it as Long? }
-      return CupertinoVideoOptions(fileType, codec, fps)
+    fun fromList(pigeonVar_list: List<Any?>): CupertinoVideoOptions {
+      val fileType = pigeonVar_list[0] as CupertinoFileType?
+      val codec = pigeonVar_list[1] as CupertinoCodecType?
+      val fps = pigeonVar_list[2].let { num -> if (num is Int) num.toLong() else num as Long? }
+      val colorSpace = pigeonVar_list[3].let { num -> if (num is Int) num.toLong() else num as Long? }
+      return CupertinoVideoOptions(fileType, codec, fps, colorSpace)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
-      fileType?.raw,
-      codec?.raw,
+    return listOf(
+      fileType,
+      codec,
       fps,
+      colorSpace,
     )
   }
 }
@@ -369,22 +356,21 @@ data class PigeonSensorTypeDevice (
   val flashAvailable: Boolean,
   /** An identifier that uniquely identifies the device. */
   val uid: String
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): PigeonSensorTypeDevice {
-      val sensorType = PigeonSensorType.ofRaw(list[0] as Int)!!
-      val name = list[1] as String
-      val iso = list[2] as Double
-      val flashAvailable = list[3] as Boolean
-      val uid = list[4] as String
+    fun fromList(pigeonVar_list: List<Any?>): PigeonSensorTypeDevice {
+      val sensorType = pigeonVar_list[0] as PigeonSensorType
+      val name = pigeonVar_list[1] as String
+      val iso = pigeonVar_list[2] as Double
+      val flashAvailable = pigeonVar_list[3] as Boolean
+      val uid = pigeonVar_list[4] as String
       return PigeonSensorTypeDevice(sensorType, name, iso, flashAvailable, uid)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
-      sensorType.raw,
+    return listOf(
+      sensorType,
       name,
       iso,
       flashAvailable,
@@ -404,17 +390,16 @@ data class AndroidFocusSettings (
    * between 0 (exclusive) and 1000 (exclusive), it will be raised to 1000.
    */
   val autoCancelDurationInMillis: Long
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): AndroidFocusSettings {
-      val autoCancelDurationInMillis = list[0].let { if (it is Int) it.toLong() else it as Long }
+    fun fromList(pigeonVar_list: List<Any?>): AndroidFocusSettings {
+      val autoCancelDurationInMillis = pigeonVar_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
       return AndroidFocusSettings(autoCancelDurationInMillis)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       autoCancelDurationInMillis,
     )
   }
@@ -427,21 +412,20 @@ data class PlaneWrapper (
   val bytesPerPixel: Long? = null,
   val width: Long? = null,
   val height: Long? = null
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): PlaneWrapper {
-      val bytes = list[0] as ByteArray
-      val bytesPerRow = list[1].let { if (it is Int) it.toLong() else it as Long }
-      val bytesPerPixel = list[2].let { if (it is Int) it.toLong() else it as Long? }
-      val width = list[3].let { if (it is Int) it.toLong() else it as Long? }
-      val height = list[4].let { if (it is Int) it.toLong() else it as Long? }
+    fun fromList(pigeonVar_list: List<Any?>): PlaneWrapper {
+      val bytes = pigeonVar_list[0] as ByteArray
+      val bytesPerRow = pigeonVar_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
+      val bytesPerPixel = pigeonVar_list[2].let { num -> if (num is Int) num.toLong() else num as Long? }
+      val width = pigeonVar_list[3].let { num -> if (num is Int) num.toLong() else num as Long? }
+      val height = pigeonVar_list[4].let { num -> if (num is Int) num.toLong() else num as Long? }
       return PlaneWrapper(bytes, bytesPerRow, bytesPerPixel, width, height)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       bytes,
       bytesPerRow,
       bytesPerPixel,
@@ -457,20 +441,19 @@ data class CropRectWrapper (
   val top: Long,
   val width: Long,
   val height: Long
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): CropRectWrapper {
-      val left = list[0].let { if (it is Int) it.toLong() else it as Long }
-      val top = list[1].let { if (it is Int) it.toLong() else it as Long }
-      val width = list[2].let { if (it is Int) it.toLong() else it as Long }
-      val height = list[3].let { if (it is Int) it.toLong() else it as Long }
+    fun fromList(pigeonVar_list: List<Any?>): CropRectWrapper {
+      val left = pigeonVar_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
+      val top = pigeonVar_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
+      val width = pigeonVar_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
+      val height = pigeonVar_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
       return CropRectWrapper(left, top, width, height)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
+    return listOf(
       left,
       top,
       width,
@@ -488,72 +471,218 @@ data class AnalysisImageWrapper (
   val planes: List<PlaneWrapper?>? = null,
   val cropRect: CropRectWrapper? = null,
   val rotation: AnalysisRotation? = null
-
-) {
+)
+ {
   companion object {
-    @Suppress("UNCHECKED_CAST")
-    fun fromList(list: List<Any?>): AnalysisImageWrapper {
-      val format = AnalysisImageFormat.ofRaw(list[0] as Int)!!
-      val bytes = list[1] as ByteArray?
-      val width = list[2].let { if (it is Int) it.toLong() else it as Long }
-      val height = list[3].let { if (it is Int) it.toLong() else it as Long }
-      val planes = list[4] as List<PlaneWrapper?>?
-      val cropRect: CropRectWrapper? = (list[5] as List<Any?>?)?.let {
-        CropRectWrapper.fromList(it)
-      }
-      val rotation: AnalysisRotation? = (list[6] as Int?)?.let {
-        AnalysisRotation.ofRaw(it)
-      }
+    fun fromList(pigeonVar_list: List<Any?>): AnalysisImageWrapper {
+      val format = pigeonVar_list[0] as AnalysisImageFormat
+      val bytes = pigeonVar_list[1] as ByteArray?
+      val width = pigeonVar_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
+      val height = pigeonVar_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
+      val planes = pigeonVar_list[4] as List<PlaneWrapper?>?
+      val cropRect = pigeonVar_list[5] as CropRectWrapper?
+      val rotation = pigeonVar_list[6] as AnalysisRotation?
       return AnalysisImageWrapper(format, bytes, width, height, planes, cropRect, rotation)
     }
   }
   fun toList(): List<Any?> {
-    return listOf<Any?>(
-      format.raw,
+    return listOf(
+      format,
       bytes,
       width,
       height,
       planes,
-      cropRect?.toList(),
-      rotation?.raw,
+      cropRect,
+      rotation,
     )
   }
 }
-
-@Suppress("UNCHECKED_CAST")
-private object AnalysisImageUtilsCodec : StandardMessageCodec() {
+private object PigeonPigeonCodec : StandardMessageCodec() {
   override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
     return when (type) {
-      128.toByte() -> {
+      129.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          PigeonSensorPosition.ofRaw(it)
+        }
+      }
+      130.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          VideoRecordingQuality.ofRaw(it)
+        }
+      }
+      131.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          QualityFallbackStrategy.ofRaw(it)
+        }
+      }
+      132.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          CupertinoFileType.ofRaw(it)
+        }
+      }
+      133.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          CupertinoCodecType.ofRaw(it)
+        }
+      }
+      134.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          PigeonSensorType.ofRaw(it)
+        }
+      }
+      135.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          CamerAwesomePermission.ofRaw(it)
+        }
+      }
+      136.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          AnalysisImageFormat.ofRaw(it)
+        }
+      }
+      137.toByte() -> {
+        return (readValue(buffer) as Int?)?.let {
+          AnalysisRotation.ofRaw(it)
+        }
+      }
+      138.toByte() -> {
         return (readValue(buffer) as? List<Any?>)?.let {
-          AnalysisImageWrapper.fromList(it)
+          PreviewSize.fromList(it)
         }
       }
-      129.toByte() -> {
+      139.toByte() -> {
         return (readValue(buffer) as? List<Any?>)?.let {
-          CropRectWrapper.fromList(it)
+          ExifPreferences.fromList(it)
         }
       }
-      130.toByte() -> {
+      140.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          PigeonSensor.fromList(it)
+        }
+      }
+      141.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          VideoOptions.fromList(it)
+        }
+      }
+      142.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          AndroidVideoOptions.fromList(it)
+        }
+      }
+      143.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          CupertinoVideoOptions.fromList(it)
+        }
+      }
+      144.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          PigeonSensorTypeDevice.fromList(it)
+        }
+      }
+      145.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          AndroidFocusSettings.fromList(it)
+        }
+      }
+      146.toByte() -> {
         return (readValue(buffer) as? List<Any?>)?.let {
           PlaneWrapper.fromList(it)
         }
       }
+      147.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          CropRectWrapper.fromList(it)
+        }
+      }
+      148.toByte() -> {
+        return (readValue(buffer) as? List<Any?>)?.let {
+          AnalysisImageWrapper.fromList(it)
+        }
+      }
       else -> super.readValueOfType(type, buffer)
     }
   }
   override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
     when (value) {
-      is AnalysisImageWrapper -> {
-        stream.write(128)
+      is PigeonSensorPosition -> {
+        stream.write(129)
+        writeValue(stream, value.raw)
+      }
+      is VideoRecordingQuality -> {
+        stream.write(130)
+        writeValue(stream, value.raw)
+      }
+      is QualityFallbackStrategy -> {
+        stream.write(131)
+        writeValue(stream, value.raw)
+      }
+      is CupertinoFileType -> {
+        stream.write(132)
+        writeValue(stream, value.raw)
+      }
+      is CupertinoCodecType -> {
+        stream.write(133)
+        writeValue(stream, value.raw)
+      }
+      is PigeonSensorType -> {
+        stream.write(134)
+        writeValue(stream, value.raw)
+      }
+      is CamerAwesomePermission -> {
+        stream.write(135)
+        writeValue(stream, value.raw)
+      }
+      is AnalysisImageFormat -> {
+        stream.write(136)
+        writeValue(stream, value.raw)
+      }
+      is AnalysisRotation -> {
+        stream.write(137)
+        writeValue(stream, value.raw)
+      }
+      is PreviewSize -> {
+        stream.write(138)
         writeValue(stream, value.toList())
       }
-      is CropRectWrapper -> {
-        stream.write(129)
+      is ExifPreferences -> {
+        stream.write(139)
+        writeValue(stream, value.toList())
+      }
+      is PigeonSensor -> {
+        stream.write(140)
+        writeValue(stream, value.toList())
+      }
+      is VideoOptions -> {
+        stream.write(141)
+        writeValue(stream, value.toList())
+      }
+      is AndroidVideoOptions -> {
+        stream.write(142)
+        writeValue(stream, value.toList())
+      }
+      is CupertinoVideoOptions -> {
+        stream.write(143)
+        writeValue(stream, value.toList())
+      }
+      is PigeonSensorTypeDevice -> {
+        stream.write(144)
+        writeValue(stream, value.toList())
+      }
+      is AndroidFocusSettings -> {
+        stream.write(145)
         writeValue(stream, value.toList())
       }
       is PlaneWrapper -> {
-        stream.write(130)
+        stream.write(146)
+        writeValue(stream, value.toList())
+      }
+      is CropRectWrapper -> {
+        stream.write(147)
+        writeValue(stream, value.toList())
+      }
+      is AnalysisImageWrapper -> {
+        stream.write(148)
         writeValue(stream, value.toList())
       }
       else -> super.writeValue(stream, value)
@@ -561,6 +690,7 @@ private object AnalysisImageUtilsCodec : StandardMessageCodec() {
   }
 }
 
+
 /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
 interface AnalysisImageUtils {
   fun nv21toJpeg(nv21Image: AnalysisImageWrapper, jpegQuality: Long, callback: (Result<AnalysisImageWrapper>) -> Unit)
@@ -571,18 +701,19 @@ interface AnalysisImageUtils {
   companion object {
     /** The codec used by AnalysisImageUtils. */
     val codec: MessageCodec<Any?> by lazy {
-      AnalysisImageUtilsCodec
+      PigeonPigeonCodec
     }
     /** Sets up an instance of `AnalysisImageUtils` to handle messages through the `binaryMessenger`. */
-    @Suppress("UNCHECKED_CAST")
-    fun setUp(binaryMessenger: BinaryMessenger, api: AnalysisImageUtils?) {
+    @JvmOverloads
+    fun setUp(binaryMessenger: BinaryMessenger, api: AnalysisImageUtils?, messageChannelSuffix: String = "") {
+      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.AnalysisImageUtils.nv21toJpeg", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.AnalysisImageUtils.nv21toJpeg$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val nv21ImageArg = args[0] as AnalysisImageWrapper
-            val jpegQualityArg = args[1].let { if (it is Int) it.toLong() else it as Long }
+            val jpegQualityArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
             api.nv21toJpeg(nv21ImageArg, jpegQualityArg) { result: Result<AnalysisImageWrapper> ->
               val error = result.exceptionOrNull()
               if (error != null) {
@@ -598,12 +729,12 @@ interface AnalysisImageUtils {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.AnalysisImageUtils.yuv420toJpeg", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.AnalysisImageUtils.yuv420toJpeg$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val yuvImageArg = args[0] as AnalysisImageWrapper
-            val jpegQualityArg = args[1].let { if (it is Int) it.toLong() else it as Long }
+            val jpegQualityArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
             api.yuv420toJpeg(yuvImageArg, jpegQualityArg) { result: Result<AnalysisImageWrapper> ->
               val error = result.exceptionOrNull()
               if (error != null) {
@@ -619,7 +750,7 @@ interface AnalysisImageUtils {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.AnalysisImageUtils.yuv420toNv21", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.AnalysisImageUtils.yuv420toNv21$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -639,12 +770,12 @@ interface AnalysisImageUtils {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.AnalysisImageUtils.bgra8888toJpeg", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.AnalysisImageUtils.bgra8888toJpeg$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val bgra8888imageArg = args[0] as AnalysisImageWrapper
-            val jpegQualityArg = args[1].let { if (it is Int) it.toLong() else it as Long }
+            val jpegQualityArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
             api.bgra8888toJpeg(bgra8888imageArg, jpegQualityArg) { result: Result<AnalysisImageWrapper> ->
               val error = result.exceptionOrNull()
               if (error != null) {
@@ -662,101 +793,6 @@ interface AnalysisImageUtils {
     }
   }
 }
-@Suppress("UNCHECKED_CAST")
-private object CameraInterfaceCodec : StandardMessageCodec() {
-  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
-    return when (type) {
-      128.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          AndroidFocusSettings.fromList(it)
-        }
-      }
-      129.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          AndroidVideoOptions.fromList(it)
-        }
-      }
-      130.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          CupertinoVideoOptions.fromList(it)
-        }
-      }
-      131.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          ExifPreferences.fromList(it)
-        }
-      }
-      132.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          PigeonSensor.fromList(it)
-        }
-      }
-      133.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          PigeonSensorTypeDevice.fromList(it)
-        }
-      }
-      134.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          PreviewSize.fromList(it)
-        }
-      }
-      135.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          PreviewSize.fromList(it)
-        }
-      }
-      136.toByte() -> {
-        return (readValue(buffer) as? List<Any?>)?.let {
-          VideoOptions.fromList(it)
-        }
-      }
-      else -> super.readValueOfType(type, buffer)
-    }
-  }
-  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
-    when (value) {
-      is AndroidFocusSettings -> {
-        stream.write(128)
-        writeValue(stream, value.toList())
-      }
-      is AndroidVideoOptions -> {
-        stream.write(129)
-        writeValue(stream, value.toList())
-      }
-      is CupertinoVideoOptions -> {
-        stream.write(130)
-        writeValue(stream, value.toList())
-      }
-      is ExifPreferences -> {
-        stream.write(131)
-        writeValue(stream, value.toList())
-      }
-      is PigeonSensor -> {
-        stream.write(132)
-        writeValue(stream, value.toList())
-      }
-      is PigeonSensorTypeDevice -> {
-        stream.write(133)
-        writeValue(stream, value.toList())
-      }
-      is PreviewSize -> {
-        stream.write(134)
-        writeValue(stream, value.toList())
-      }
-      is PreviewSize -> {
-        stream.write(135)
-        writeValue(stream, value.toList())
-      }
-      is VideoOptions -> {
-        stream.write(136)
-        writeValue(stream, value.toList())
-      }
-      else -> super.writeValue(stream, value)
-    }
-  }
-}
-
 /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
 interface CameraInterface {
   fun setupCamera(sensors: List<PigeonSensor>, aspectRatio: String, zoom: Double, mirrorFrontCamera: Boolean, enablePhysicalButton: Boolean, flashMode: String, captureMode: String, enableImageStream: Boolean, exifPreferences: ExifPreferences, videoOptions: VideoOptions?, callback: (Result<Boolean>) -> Unit)
@@ -811,13 +847,14 @@ interface CameraInterface {
   companion object {
     /** The codec used by CameraInterface. */
     val codec: MessageCodec<Any?> by lazy {
-      CameraInterfaceCodec
+      PigeonPigeonCodec
     }
     /** Sets up an instance of `CameraInterface` to handle messages through the `binaryMessenger`. */
-    @Suppress("UNCHECKED_CAST")
-    fun setUp(binaryMessenger: BinaryMessenger, api: CameraInterface?) {
+    @JvmOverloads
+    fun setUp(binaryMessenger: BinaryMessenger, api: CameraInterface?, messageChannelSuffix: String = "") {
+      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setupCamera", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setupCamera$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -846,16 +883,15 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.checkPermissions", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.checkPermissions$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val permissionsArg = args[0] as List<String>
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.checkPermissions(permissionsArg))
+            val wrapped: List<Any?> = try {
+              listOf(api.checkPermissions(permissionsArg))
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -864,7 +900,7 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.requestPermissions", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.requestPermissions$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -884,16 +920,15 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getPreviewTextureId", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.getPreviewTextureId$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
-            val cameraPositionArg = args[0].let { if (it is Int) it.toLong() else it as Long }
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.getPreviewTextureId(cameraPositionArg))
+            val cameraPositionArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
+            val wrapped: List<Any?> = try {
+              listOf(api.getPreviewTextureId(cameraPositionArg))
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -902,7 +937,7 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.takePhoto", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.takePhoto$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -923,7 +958,7 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.recordVideo", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.recordVideo$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -943,15 +978,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.pauseVideoRecording", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.pauseVideoRecording$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.pauseVideoRecording()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -960,15 +994,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.resumeVideoRecording", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.resumeVideoRecording$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.resumeVideoRecording()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -977,15 +1010,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.receivedImageFromStream", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.receivedImageFromStream$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.receivedImageFromStream()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -994,10 +1026,10 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.stopRecordingVideo", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.stopRecordingVideo$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            api.stopRecordingVideo() { result: Result<Boolean> ->
+            api.stopRecordingVideo{ result: Result<Boolean> ->
               val error = result.exceptionOrNull()
               if (error != null) {
                 reply.reply(wrapError(error))
@@ -1012,14 +1044,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getFrontSensors", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.getFrontSensors$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.getFrontSensors())
+            val wrapped: List<Any?> = try {
+              listOf(api.getFrontSensors())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1028,14 +1059,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getBackSensors", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.getBackSensors$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.getBackSensors())
+            val wrapped: List<Any?> = try {
+              listOf(api.getBackSensors())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1044,14 +1074,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.start", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.start$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.start())
+            val wrapped: List<Any?> = try {
+              listOf(api.start())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1060,14 +1089,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.stop", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.stop$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.stop())
+            val wrapped: List<Any?> = try {
+              listOf(api.stop())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1076,17 +1104,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setFlashMode", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setFlashMode$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val modeArg = args[0] as String
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setFlashMode(modeArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1095,15 +1122,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.handleAutoFocus", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.handleAutoFocus$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.handleAutoFocus()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1112,7 +1138,7 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.focusOnPoint", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.focusOnPoint$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -1120,12 +1146,11 @@ interface CameraInterface {
             val xArg = args[1] as Double
             val yArg = args[2] as Double
             val androidFocusSettingsArg = args[3] as AndroidFocusSettings?
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.focusOnPoint(previewSizeArg, xArg, yArg, androidFocusSettingsArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1134,17 +1159,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setZoom", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setZoom$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val zoomArg = args[0] as Double
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setZoom(zoomArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1153,17 +1177,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setMirrorFrontCamera", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setMirrorFrontCamera$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val mirrorArg = args[0] as Boolean
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setMirrorFrontCamera(mirrorArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1172,17 +1195,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setSensor", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setSensor$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val sensorsArg = args[0] as List<PigeonSensor>
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setSensor(sensorsArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1191,17 +1213,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setCorrection", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setCorrection$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val brightnessArg = args[0] as Double
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setCorrection(brightnessArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1210,14 +1231,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getMinZoom", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.getMinZoom$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.getMinZoom())
+            val wrapped: List<Any?> = try {
+              listOf(api.getMinZoom())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1226,14 +1246,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getMaxZoom", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.getMaxZoom$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.getMaxZoom())
+            val wrapped: List<Any?> = try {
+              listOf(api.getMaxZoom())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1242,17 +1261,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setCaptureMode", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setCaptureMode$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val modeArg = args[0] as String
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setCaptureMode(modeArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1261,7 +1279,7 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setRecordingAudioMode", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setRecordingAudioMode$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -1281,14 +1299,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.availableSizes", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.availableSizes$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.availableSizes())
+            val wrapped: List<Any?> = try {
+              listOf(api.availableSizes())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1297,15 +1314,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.refresh", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.refresh$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.refresh()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1314,16 +1330,15 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getEffectivPreviewSize", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.getEffectivPreviewSize$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
-            val indexArg = args[0].let { if (it is Int) it.toLong() else it as Long }
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.getEffectivPreviewSize(indexArg))
+            val indexArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
+            val wrapped: List<Any?> = try {
+              listOf(api.getEffectivPreviewSize(indexArg))
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1332,17 +1347,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setPhotoSize", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setPhotoSize$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val sizeArg = args[0] as PreviewSize
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setPhotoSize(sizeArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1351,17 +1365,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setPreviewSize", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setPreviewSize$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val sizeArg = args[0] as PreviewSize
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setPreviewSize(sizeArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1370,17 +1383,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setAspectRatio", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setAspectRatio$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val aspectRatioArg = args[0] as String
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setAspectRatio(aspectRatioArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1389,20 +1401,19 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setupImageAnalysisStream", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setupImageAnalysisStream$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val formatArg = args[0] as String
-            val widthArg = args[1].let { if (it is Int) it.toLong() else it as Long }
+            val widthArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
             val maxFramesPerSecondArg = args[2] as Double?
             val autoStartArg = args[3] as Boolean
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setupImageAnalysisStream(formatArg, widthArg, maxFramesPerSecondArg, autoStartArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1411,7 +1422,7 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setExifPreferences", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setExifPreferences$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
@@ -1431,15 +1442,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.startAnalysis", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.startAnalysis$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.startAnalysis()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1448,15 +1458,14 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.stopAnalysis", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.stopAnalysis$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.stopAnalysis()
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1465,17 +1474,16 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setFilter", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.setFilter$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
             val matrixArg = args[0] as List<Double>
-            var wrapped: List<Any?>
-            try {
+            val wrapped: List<Any?> = try {
               api.setFilter(matrixArg)
-              wrapped = listOf<Any?>(null)
+              listOf(null)
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
@@ -1484,11 +1492,11 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.isVideoRecordingAndImageAnalysisSupported", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.isVideoRecordingAndImageAnalysisSupported$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { message, reply ->
             val args = message as List<Any?>
-            val sensorArg = PigeonSensorPosition.ofRaw(args[0] as Int)!!
+            val sensorArg = args[0] as PigeonSensorPosition
             api.isVideoRecordingAndImageAnalysisSupported(sensorArg) { result: Result<Boolean> ->
               val error = result.exceptionOrNull()
               if (error != null) {
@@ -1504,14 +1512,13 @@ interface CameraInterface {
         }
       }
       run {
-        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.isMultiCamSupported", codec)
+        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerawesome.CameraInterface.isMultiCamSupported$separatedMessageChannelSuffix", codec)
         if (api != null) {
           channel.setMessageHandler { _, reply ->
-            var wrapped: List<Any?>
-            try {
-              wrapped = listOf<Any?>(api.isMultiCamSupported())
+            val wrapped: List<Any?> = try {
+              listOf(api.isMultiCamSupported())
             } catch (exception: Throwable) {
-              wrapped = wrapError(exception)
+              wrapError(exception)
             }
             reply.reply(wrapped)
           }
diff --git a/example/pubspec.lock b/example/pubspec.lock
index 176ab47..bd0c036 100644
--- a/example/pubspec.lock
+++ b/example/pubspec.lock
@@ -39,7 +39,7 @@ packages:
       path: ".."
       relative: true
     source: path
-    version: "2.2.0"
+    version: "2.3.0"
   carousel_slider:
     dependency: transitive
     description:
diff --git a/ios/camerawesome/Sources/camerawesome/CameraPreview/SingleCameraPreview/SingleCameraPreview.m b/ios/camerawesome/Sources/camerawesome/CameraPreview/SingleCameraPreview/SingleCameraPreview.m
index 80468c8..9ce2606 100644
--- a/ios/camerawesome/Sources/camerawesome/CameraPreview/SingleCameraPreview/SingleCameraPreview.m
+++ b/ios/camerawesome/Sources/camerawesome/CameraPreview/SingleCameraPreview/SingleCameraPreview.m
@@ -139,6 +139,11 @@
     _completion(nil, [FlutterError errorWithCode:@"CANNOT_OPEN_CAMERA" message:@"can't attach device to input" details:[error localizedDescription]]);
     return;
   }
+
+  // Disable automatic wide color configuration to handle it manually
+  if ([_captureSession respondsToSelector:@selector(setAutomaticallyConfiguresCaptureDeviceForWideColor:)]) {
+    [_captureSession setAutomaticallyConfiguresCaptureDeviceForWideColor:NO];
+  }
   
   // Create connection
   _captureConnection = [AVCaptureConnection connectionWithInputPorts:_captureVideoInput.ports
diff --git a/ios/camerawesome/Sources/camerawesome/Controllers/Video/VideoController.m b/ios/camerawesome/Sources/camerawesome/Controllers/Video/VideoController.m
index a95ee6e..1ec808a 100644
--- a/ios/camerawesome/Sources/camerawesome/Controllers/Video/VideoController.m
+++ b/ios/camerawesome/Sources/camerawesome/Controllers/Video/VideoController.m
@@ -5,10 +5,27 @@
 //  Created by Dimitri Dessus on 17/12/2020.
 //
 
+
 #import "VideoController.h"
 
+
 FourCharCode const videoFormat = kCVPixelFormatType_32BGRA;
 
+static AVCaptureColorSpace colorSpaceFromInt(NSInteger colorSpaceInt) {
+  switch (colorSpaceInt) {
+    case 0: return AVCaptureColorSpace_sRGB;
+    case 1: return AVCaptureColorSpace_P3_D65;
+    case 2: return AVCaptureColorSpace_HLG_BT2020;
+    case 3:
+      if (@available(iOS 16.0, *)) {
+        return AVCaptureColorSpace_appleLog;
+      } else {
+        return AVCaptureColorSpace_sRGB;
+      }
+    default: return AVCaptureColorSpace_sRGB;
+  }
+}
+
 @implementation VideoController
 
 - (instancetype)init {
@@ -26,6 +43,17 @@ FourCharCode const videoFormat = kCVPixelFormatType_32BGRA;
 - (void)recordVideoAtPath:(NSString *)path captureDevice:(AVCaptureDevice *)device orientation:(NSInteger)orientation audioSetupCallback:(OnAudioSetup)audioSetupCallback videoWriterCallback:(OnVideoWriterSetup)videoWriterCallback options:(CupertinoVideoOptions *)options quality:(VideoRecordingQuality)quality completion:(nonnull void (^)(FlutterError * _Nullable))completion {
   _options = options;
   _recordingQuality = quality;
+
+  // Get the codec type first
+  AVVideoCodecType codecType = [self getBestCodecTypeAccordingOptions:options];
+  
+  // Configure color space with respect to the codec
+  if (options && options != (id)[NSNull null] && options.colorSpace >= 0 && options.colorSpace <= 4) {
+    // Use direct integer value instead of enum
+    [self configureColorSpaceForRecording:device 
+                            colorSpaceInt:options.colorSpace
+                                    codec:codecType];
+  }
   
   // Create audio & video writer
   if (![self setupWriterForPath:path audioSetupCallback:audioSetupCallback options:options completion:completion]) {
@@ -397,6 +425,187 @@ FourCharCode const videoFormat = kCVPixelFormatType_32BGRA;
   return size;
 }
 
+// Convert CupertinoColorSpace to AVCaptureColorSpace
+- (AVCaptureColorSpace)convertToAVCaptureColorSpace:(CupertinoColorSpace)colorSpace {
+  return colorSpaceFromInt(colorSpace);
+}
+
+// Check if a device format supports a specific color space
+- (BOOL)deviceFormat:(AVCaptureDeviceFormat *)format supportsColorSpace:(AVCaptureColorSpace)colorSpace {
+  if (@available(iOS 10.0, *)) {
+    NSArray<NSNumber *> *supportedColorSpaces = [format supportedColorSpaces];
+    for (NSNumber *supportedSpace in supportedColorSpaces) {
+      if ([supportedSpace intValue] == colorSpace) {
+        return YES;
+      }
+    }
+  }
+  return NO;
+}
+
+// Configure color space for recording
+- (void)configureColorSpaceForRecording:(AVCaptureDevice *)device 
+                             colorSpaceInt:(NSInteger)colorSpaceInt
+                                  codec:(AVVideoCodecType)codecType {
+  if (colorSpace <  0 || colorSpace > 4) {
+    // Use default if not specified
+    return;
+  }
+  
+  AVCaptureColorSpace avColorSpace = colorSpaceFromInt(colorSpaceInt);
+  
+  // Check if the device format supports the color space
+  if (![self deviceFormat:device.activeFormat supportsColorSpace:avColorSpace]) {
+    // Find alternative color space but KEEP the codec
+    avColorSpace = [self findCompatibleColorSpace:device.activeFormat 
+                                originalColorSpace:avColorSpace
+                                            codec:codecType];
+  } else {
+    // Check codec compatibility with color space
+    if (![self isColorSpaceCompatibleWithCodec:avColorSpace codec:codecType]) {
+      // If incompatible, find a compatible color space
+      avColorSpace = [self findCompatibleColorSpaceForCodec:device.activeFormat codec:codecType];
+    }
+  }
+  
+  // Set the color space
+  NSError *error = nil;
+  if ([device lockForConfiguration:&error]) {
+    device.activeColorSpace = avColorSpace;
+    [device unlockForConfiguration];
+  } else {
+    NSLog(@"Failed to set color space: %@", error);
+  }
+}
+
+// Check if a color space is compatible with a codec
+- (BOOL)isColorSpaceCompatibleWithCodec:(AVCaptureColorSpace)colorSpace codec:(AVVideoCodecType)codec {
+  // appleLog is only compatible with ProRes codecs
+  if (colorSpace == AVCaptureColorSpace_appleLog) {
+    return [codec isEqualToString:AVVideoCodecTypeAppleProRes4444] ||
+           [codec isEqualToString:AVVideoCodecTypeAppleProRes422] ||
+           [codec isEqualToString:AVVideoCodecTypeAppleProRes422HQ] ||
+           [codec isEqualToString:AVVideoCodecTypeAppleProRes422LT] ||
+           [codec isEqualToString:AVVideoCodecTypeAppleProRes422Proxy];
+  }
+  
+  // HLG_BT2020 works best with HEVC but can work with others
+  // We'll allow any codec with HLG
+  
+  return YES;  // Other combinations are compatible
+}
+
+// Find a compatible color space for device format while respecting codec
+- (AVCaptureColorSpace)findCompatibleColorSpace:(AVCaptureDeviceFormat *)format 
+                           originalColorSpace:(AVCaptureColorSpace)originalColorSpace
+                                       codec:(AVVideoCodecType)codec {
+  NSArray<NSNumber *> *supportedColorSpaces = [format supportedColorSpaces];
+  BOOL isProResCodec = [codec isEqualToString:AVVideoCodecTypeAppleProRes4444] ||
+                       [codec isEqualToString:AVVideoCodecTypeAppleProRes422] ||
+                       [codec isEqualToString:AVVideoCodecTypeAppleProRes422HQ] ||
+                       [codec isEqualToString:AVVideoCodecTypeAppleProRes422LT] ||
+                       [codec isEqualToString:AVVideoCodecTypeAppleProRes422Proxy];
+  
+  // Original was appleLog
+  if (originalColorSpace == AVCaptureColorSpace_appleLog) {
+    // If it's a ProRes codec, we need to check alternatives for appleLog
+    if (isProResCodec) {
+      // Check for HLG_BT2020 support
+      for (NSNumber *space in supportedColorSpaces) {
+        if ([space intValue] == AVCaptureColorSpace_HLG_BT2020) {
+          return AVCaptureColorSpace_HLG_BT2020;
+        }
+      }
+      
+      // Check for P3_D65 support
+      for (NSNumber *space in supportedColorSpaces) {
+        if ([space intValue] == AVCaptureColorSpace_P3_D65) {
+          return AVCaptureColorSpace_P3_D65;
+        }
+      }
+    } else {
+      // For non-ProRes codecs, appleLog isn't supported anyway
+      // Check other color spaces
+      for (NSNumber *space in supportedColorSpaces) {
+        if ([space intValue] == AVCaptureColorSpace_HLG_BT2020) {
+          return AVCaptureColorSpace_HLG_BT2020;
+        }
+      }
+      
+      for (NSNumber *space in supportedColorSpaces) {
+        if ([space intValue] == AVCaptureColorSpace_P3_D65) {
+          return AVCaptureColorSpace_P3_D65;
+        }
+      }
+    }
+  } 
+  // Original was HLG_BT2020
+  else if (originalColorSpace == AVCaptureColorSpace_HLG_BT2020) {
+    // Check for P3_D65 support
+    for (NSNumber *space in supportedColorSpaces) {
+      if ([space intValue] == AVCaptureColorSpace_P3_D65) {
+        return AVCaptureColorSpace_P3_D65;
+      }
+    }
+  }
+  
+  // Default fallback to sRGB
+  return AVCaptureColorSpace_sRGB;
+}
+
+// Find the best compatible color space for a codec
+- (AVCaptureColorSpace)findCompatibleColorSpaceForCodec:(AVCaptureDeviceFormat *)format codec:(AVVideoCodecType)codec {
+  NSArray<NSNumber *> *supportedColorSpaces = [format supportedColorSpaces];
+  BOOL isProResCodec = [codec isEqualToString:AVVideoCodecTypeAppleProRes4444] ||
+                      [codec isEqualToString:AVVideoCodecTypeAppleProRes422] ||
+                      [codec isEqualToString:AVVideoCodecTypeAppleProRes422HQ] ||
+                      [codec isEqualToString:AVVideoCodecTypeAppleProRes422LT] ||
+                      [codec isEqualToString:AVVideoCodecTypeAppleProRes422Proxy];
+  
+  if (isProResCodec) {
+    // ProRes can work with appleLog if supported
+    if (@available(iOS 16.0, *)) {
+      for (NSNumber *space in supportedColorSpaces) {
+        if ([space intValue] == AVCaptureColorSpace_appleLog) {
+          return AVCaptureColorSpace_appleLog;
+        }
+      }
+    }
+    
+    // Check for HLG_BT2020
+    for (NSNumber *space in supportedColorSpaces) {
+      if ([space intValue] == AVCaptureColorSpace_HLG_BT2020) {
+        return AVCaptureColorSpace_HLG_BT2020;
+      }
+    }
+    
+    // Check for P3_D65
+    for (NSNumber *space in supportedColorSpaces) {
+      if ([space intValue] == AVCaptureColorSpace_P3_D65) {
+        return AVCaptureColorSpace_P3_D65;
+      }
+    }
+  } else {
+    // For non-ProRes codecs
+    // Check for HLG_BT2020 - works especially well with HEVC
+    for (NSNumber *space in supportedColorSpaces) {
+      if ([space intValue] == AVCaptureColorSpace_HLG_BT2020) {
+        return AVCaptureColorSpace_HLG_BT2020;
+      }
+    }
+    
+    // Check for P3_D65
+    for (NSNumber *space in supportedColorSpaces) {
+      if ([space intValue] == AVCaptureColorSpace_P3_D65) {
+        return AVCaptureColorSpace_P3_D65;
+      }
+    }
+  }
+  
+  // Default fallback
+  return AVCaptureColorSpace_sRGB;
+}
+
 # pragma mark - Setter
 - (void)setIsAudioEnabled:(bool)isAudioEnabled {
   _isAudioEnabled = isAudioEnabled;
diff --git a/ios/camerawesome/Sources/camerawesome/Pigeon/Pigeon.m b/ios/camerawesome/Sources/camerawesome/Pigeon/Pigeon.m
index 72d045c..dce8c8d 100644
--- a/ios/camerawesome/Sources/camerawesome/Pigeon/Pigeon.m
+++ b/ios/camerawesome/Sources/camerawesome/Pigeon/Pigeon.m
@@ -1,14 +1,19 @@
-// Autogenerated from Pigeon (v9.2.5), do not edit directly.
+// Autogenerated from Pigeon (v21.2.0), do not edit directly.
 // See also: https://pub.dev/packages/pigeon
 
 #import "Pigeon.h"
+
+#if TARGET_OS_OSX
+#import <FlutterMacOS/FlutterMacOS.h>
+#else
 #import <Flutter/Flutter.h>
+#endif
 
 #if !__has_feature(objc_arc)
 #error File requires ARC to be enabled.
 #endif
 
-static NSArray *wrapResult(id result, FlutterError *error) {
+static NSArray<id> *wrapResult(id result, FlutterError *error) {
   if (error) {
     return @[
       error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
@@ -16,122 +21,219 @@ static NSArray *wrapResult(id result, FlutterError *error) {
   }
   return @[ result ?: [NSNull null] ];
 }
-static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
+
+static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
   id result = array[key];
   return (result == [NSNull null]) ? nil : result;
 }
 
+@implementation PigeonSensorPositionBox
+- (instancetype)initWithValue:(PigeonSensorPosition)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+/// Video recording quality, from [sd] to [uhd], with [highest] and [lowest] to
+/// let the device choose the best/worst quality available.
+/// [highest] is the default quality.
+///
+/// Qualities are defined like this:
+/// [sd] < [hd] < [fhd] < [uhd]
+@implementation VideoRecordingQualityBox
+- (instancetype)initWithValue:(VideoRecordingQuality)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+/// If the specified [VideoRecordingQuality] is not available on the device,
+/// the [VideoRecordingQuality] will fallback to [higher] or [lower] quality.
+/// [higher] is the default fallback strategy.
+@implementation QualityFallbackStrategyBox
+- (instancetype)initWithValue:(QualityFallbackStrategy)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+@implementation CupertinoFileTypeBox
+- (instancetype)initWithValue:(CupertinoFileType)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+@implementation CupertinoCodecTypeBox
+- (instancetype)initWithValue:(CupertinoCodecType)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+@implementation PigeonSensorTypeBox
+- (instancetype)initWithValue:(PigeonSensorType)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+@implementation CamerAwesomePermissionBox
+- (instancetype)initWithValue:(CamerAwesomePermission)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+@implementation AnalysisImageFormatBox
+- (instancetype)initWithValue:(AnalysisImageFormat)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
+@implementation AnalysisRotationBox
+- (instancetype)initWithValue:(AnalysisRotation)value {
+  self = [super init];
+  if (self) {
+    _value = value;
+  }
+  return self;
+}
+@end
+
 @interface PreviewSize ()
-+ (PreviewSize *)fromList:(NSArray *)list;
-+ (nullable PreviewSize *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (PreviewSize *)fromList:(NSArray<id> *)list;
++ (nullable PreviewSize *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface ExifPreferences ()
-+ (ExifPreferences *)fromList:(NSArray *)list;
-+ (nullable ExifPreferences *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (ExifPreferences *)fromList:(NSArray<id> *)list;
++ (nullable ExifPreferences *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface PigeonSensor ()
-+ (PigeonSensor *)fromList:(NSArray *)list;
-+ (nullable PigeonSensor *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (PigeonSensor *)fromList:(NSArray<id> *)list;
++ (nullable PigeonSensor *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface VideoOptions ()
-+ (VideoOptions *)fromList:(NSArray *)list;
-+ (nullable VideoOptions *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (VideoOptions *)fromList:(NSArray<id> *)list;
++ (nullable VideoOptions *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface AndroidVideoOptions ()
-+ (AndroidVideoOptions *)fromList:(NSArray *)list;
-+ (nullable AndroidVideoOptions *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (AndroidVideoOptions *)fromList:(NSArray<id> *)list;
++ (nullable AndroidVideoOptions *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface CupertinoVideoOptions ()
-+ (CupertinoVideoOptions *)fromList:(NSArray *)list;
-+ (nullable CupertinoVideoOptions *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (CupertinoVideoOptions *)fromList:(NSArray<id> *)list;
++ (nullable CupertinoVideoOptions *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface PigeonSensorTypeDevice ()
-+ (PigeonSensorTypeDevice *)fromList:(NSArray *)list;
-+ (nullable PigeonSensorTypeDevice *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (PigeonSensorTypeDevice *)fromList:(NSArray<id> *)list;
++ (nullable PigeonSensorTypeDevice *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface AndroidFocusSettings ()
-+ (AndroidFocusSettings *)fromList:(NSArray *)list;
-+ (nullable AndroidFocusSettings *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (AndroidFocusSettings *)fromList:(NSArray<id> *)list;
++ (nullable AndroidFocusSettings *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface PlaneWrapper ()
-+ (PlaneWrapper *)fromList:(NSArray *)list;
-+ (nullable PlaneWrapper *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (PlaneWrapper *)fromList:(NSArray<id> *)list;
++ (nullable PlaneWrapper *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface CropRectWrapper ()
-+ (CropRectWrapper *)fromList:(NSArray *)list;
-+ (nullable CropRectWrapper *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (CropRectWrapper *)fromList:(NSArray<id> *)list;
++ (nullable CropRectWrapper *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @interface AnalysisImageWrapper ()
-+ (AnalysisImageWrapper *)fromList:(NSArray *)list;
-+ (nullable AnalysisImageWrapper *)nullableFromList:(NSArray *)list;
-- (NSArray *)toList;
++ (AnalysisImageWrapper *)fromList:(NSArray<id> *)list;
++ (nullable AnalysisImageWrapper *)nullableFromList:(NSArray<id> *)list;
+- (NSArray<id> *)toList;
 @end
 
 @implementation PreviewSize
-+ (instancetype)makeWithWidth:(NSNumber *)width
-    height:(NSNumber *)height {
++ (instancetype)makeWithWidth:(double )width
+    height:(double )height {
   PreviewSize* pigeonResult = [[PreviewSize alloc] init];
   pigeonResult.width = width;
   pigeonResult.height = height;
   return pigeonResult;
 }
-+ (PreviewSize *)fromList:(NSArray *)list {
++ (PreviewSize *)fromList:(NSArray<id> *)list {
   PreviewSize *pigeonResult = [[PreviewSize alloc] init];
-  pigeonResult.width = GetNullableObjectAtIndex(list, 0);
-  NSAssert(pigeonResult.width != nil, @"");
-  pigeonResult.height = GetNullableObjectAtIndex(list, 1);
-  NSAssert(pigeonResult.height != nil, @"");
+  pigeonResult.width = [GetNullableObjectAtIndex(list, 0) doubleValue];
+  pigeonResult.height = [GetNullableObjectAtIndex(list, 1) doubleValue];
   return pigeonResult;
 }
-+ (nullable PreviewSize *)nullableFromList:(NSArray *)list {
++ (nullable PreviewSize *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [PreviewSize fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.width ?: [NSNull null]),
-    (self.height ?: [NSNull null]),
+    @(self.width),
+    @(self.height),
   ];
 }
 @end
 
 @implementation ExifPreferences
-+ (instancetype)makeWithSaveGPSLocation:(NSNumber *)saveGPSLocation {
++ (instancetype)makeWithSaveGPSLocation:(BOOL )saveGPSLocation {
   ExifPreferences* pigeonResult = [[ExifPreferences alloc] init];
   pigeonResult.saveGPSLocation = saveGPSLocation;
   return pigeonResult;
 }
-+ (ExifPreferences *)fromList:(NSArray *)list {
++ (ExifPreferences *)fromList:(NSArray<id> *)list {
   ExifPreferences *pigeonResult = [[ExifPreferences alloc] init];
-  pigeonResult.saveGPSLocation = GetNullableObjectAtIndex(list, 0);
-  NSAssert(pigeonResult.saveGPSLocation != nil, @"");
+  pigeonResult.saveGPSLocation = [GetNullableObjectAtIndex(list, 0) boolValue];
   return pigeonResult;
 }
-+ (nullable ExifPreferences *)nullableFromList:(NSArray *)list {
++ (nullable ExifPreferences *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [ExifPreferences fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.saveGPSLocation ?: [NSNull null]),
+    @(self.saveGPSLocation),
   ];
 }
 @end
@@ -146,28 +248,30 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
   pigeonResult.deviceId = deviceId;
   return pigeonResult;
 }
-+ (PigeonSensor *)fromList:(NSArray *)list {
++ (PigeonSensor *)fromList:(NSArray<id> *)list {
   PigeonSensor *pigeonResult = [[PigeonSensor alloc] init];
-  pigeonResult.position = [GetNullableObjectAtIndex(list, 0) integerValue];
-  pigeonResult.type = [GetNullableObjectAtIndex(list, 1) integerValue];
+  PigeonSensorPositionBox *boxedPigeonSensorPosition = GetNullableObjectAtIndex(list, 0);
+  pigeonResult.position = boxedPigeonSensorPosition.value;
+  PigeonSensorTypeBox *boxedPigeonSensorType = GetNullableObjectAtIndex(list, 1);
+  pigeonResult.type = boxedPigeonSensorType.value;
   pigeonResult.deviceId = GetNullableObjectAtIndex(list, 2);
   return pigeonResult;
 }
-+ (nullable PigeonSensor *)nullableFromList:(NSArray *)list {
++ (nullable PigeonSensor *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [PigeonSensor fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    @(self.position),
-    @(self.type),
-    (self.deviceId ?: [NSNull null]),
+    [[PigeonSensorPositionBox alloc] initWithValue:self.position],
+    [[PigeonSensorTypeBox alloc] initWithValue:self.type],
+    self.deviceId ?: [NSNull null],
   ];
 }
 @end
 
 @implementation VideoOptions
-+ (instancetype)makeWithEnableAudio:(NSNumber *)enableAudio
-    quality:(VideoRecordingQuality)quality
++ (instancetype)makeWithEnableAudio:(BOOL )enableAudio
+    quality:(nullable VideoRecordingQualityBox *)quality
     android:(nullable AndroidVideoOptions *)android
     ios:(nullable CupertinoVideoOptions *)ios {
   VideoOptions* pigeonResult = [[VideoOptions alloc] init];
@@ -177,78 +281,81 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
   pigeonResult.ios = ios;
   return pigeonResult;
 }
-+ (VideoOptions *)fromList:(NSArray *)list {
++ (VideoOptions *)fromList:(NSArray<id> *)list {
   VideoOptions *pigeonResult = [[VideoOptions alloc] init];
-  pigeonResult.enableAudio = GetNullableObjectAtIndex(list, 0);
-  NSAssert(pigeonResult.enableAudio != nil, @"");
-  pigeonResult.quality = [GetNullableObjectAtIndex(list, 1) integerValue];
-  pigeonResult.android = [AndroidVideoOptions nullableFromList:(GetNullableObjectAtIndex(list, 2))];
-  pigeonResult.ios = [CupertinoVideoOptions nullableFromList:(GetNullableObjectAtIndex(list, 3))];
+  pigeonResult.enableAudio = [GetNullableObjectAtIndex(list, 0) boolValue];
+  pigeonResult.quality = GetNullableObjectAtIndex(list, 1);
+  pigeonResult.android = GetNullableObjectAtIndex(list, 2);
+  pigeonResult.ios = GetNullableObjectAtIndex(list, 3);
   return pigeonResult;
 }
-+ (nullable VideoOptions *)nullableFromList:(NSArray *)list {
++ (nullable VideoOptions *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [VideoOptions fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.enableAudio ?: [NSNull null]),
-    @(self.quality),
-    (self.android ? [self.android toList] : [NSNull null]),
-    (self.ios ? [self.ios toList] : [NSNull null]),
+    @(self.enableAudio),
+    self.quality ?: [NSNull null],
+    self.android ?: [NSNull null],
+    self.ios ?: [NSNull null],
   ];
 }
 @end
 
 @implementation AndroidVideoOptions
 + (instancetype)makeWithBitrate:(nullable NSNumber *)bitrate
-    fallbackStrategy:(QualityFallbackStrategy)fallbackStrategy {
+    fallbackStrategy:(nullable QualityFallbackStrategyBox *)fallbackStrategy {
   AndroidVideoOptions* pigeonResult = [[AndroidVideoOptions alloc] init];
   pigeonResult.bitrate = bitrate;
   pigeonResult.fallbackStrategy = fallbackStrategy;
   return pigeonResult;
 }
-+ (AndroidVideoOptions *)fromList:(NSArray *)list {
++ (AndroidVideoOptions *)fromList:(NSArray<id> *)list {
   AndroidVideoOptions *pigeonResult = [[AndroidVideoOptions alloc] init];
   pigeonResult.bitrate = GetNullableObjectAtIndex(list, 0);
-  pigeonResult.fallbackStrategy = [GetNullableObjectAtIndex(list, 1) integerValue];
+  pigeonResult.fallbackStrategy = GetNullableObjectAtIndex(list, 1);
   return pigeonResult;
 }
-+ (nullable AndroidVideoOptions *)nullableFromList:(NSArray *)list {
++ (nullable AndroidVideoOptions *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [AndroidVideoOptions fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.bitrate ?: [NSNull null]),
-    @(self.fallbackStrategy),
+    self.bitrate ?: [NSNull null],
+    self.fallbackStrategy ?: [NSNull null],
   ];
 }
 @end
 
 @implementation CupertinoVideoOptions
-+ (instancetype)makeWithFileType:(CupertinoFileType)fileType
-    codec:(CupertinoCodecType)codec
-    fps:(nullable NSNumber *)fps {
++ (instancetype)makeWithFileType:(nullable CupertinoFileTypeBox *)fileType
+    codec:(nullable CupertinoCodecTypeBox *)codec
+    fps:(nullable NSNumber *)fps
+    colorSpace:(nullable NSNumber *)colorSpace {
   CupertinoVideoOptions* pigeonResult = [[CupertinoVideoOptions alloc] init];
   pigeonResult.fileType = fileType;
   pigeonResult.codec = codec;
   pigeonResult.fps = fps;
+  pigeonResult.colorSpace = colorSpace;
   return pigeonResult;
 }
-+ (CupertinoVideoOptions *)fromList:(NSArray *)list {
++ (CupertinoVideoOptions *)fromList:(NSArray<id> *)list {
   CupertinoVideoOptions *pigeonResult = [[CupertinoVideoOptions alloc] init];
-  pigeonResult.fileType = [GetNullableObjectAtIndex(list, 0) integerValue];
-  pigeonResult.codec = [GetNullableObjectAtIndex(list, 1) integerValue];
+  pigeonResult.fileType = GetNullableObjectAtIndex(list, 0);
+  pigeonResult.codec = GetNullableObjectAtIndex(list, 1);
   pigeonResult.fps = GetNullableObjectAtIndex(list, 2);
+  pigeonResult.colorSpace = GetNullableObjectAtIndex(list, 3);
   return pigeonResult;
 }
-+ (nullable CupertinoVideoOptions *)nullableFromList:(NSArray *)list {
++ (nullable CupertinoVideoOptions *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [CupertinoVideoOptions fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    @(self.fileType),
-    @(self.codec),
-    (self.fps ?: [NSNull null]),
+    self.fileType ?: [NSNull null],
+    self.codec ?: [NSNull null],
+    self.fps ?: [NSNull null],
+    self.colorSpace ?: [NSNull null],
   ];
 }
 @end
@@ -256,8 +363,8 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
 @implementation PigeonSensorTypeDevice
 + (instancetype)makeWithSensorType:(PigeonSensorType)sensorType
     name:(NSString *)name
-    iso:(NSNumber *)iso
-    flashAvailable:(NSNumber *)flashAvailable
+    iso:(double )iso
+    flashAvailable:(BOOL )flashAvailable
     uid:(NSString *)uid {
   PigeonSensorTypeDevice* pigeonResult = [[PigeonSensorTypeDevice alloc] init];
   pigeonResult.sensorType = sensorType;
@@ -267,58 +374,54 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
   pigeonResult.uid = uid;
   return pigeonResult;
 }
-+ (PigeonSensorTypeDevice *)fromList:(NSArray *)list {
++ (PigeonSensorTypeDevice *)fromList:(NSArray<id> *)list {
   PigeonSensorTypeDevice *pigeonResult = [[PigeonSensorTypeDevice alloc] init];
-  pigeonResult.sensorType = [GetNullableObjectAtIndex(list, 0) integerValue];
+  PigeonSensorTypeBox *boxedPigeonSensorType = GetNullableObjectAtIndex(list, 0);
+  pigeonResult.sensorType = boxedPigeonSensorType.value;
   pigeonResult.name = GetNullableObjectAtIndex(list, 1);
-  NSAssert(pigeonResult.name != nil, @"");
-  pigeonResult.iso = GetNullableObjectAtIndex(list, 2);
-  NSAssert(pigeonResult.iso != nil, @"");
-  pigeonResult.flashAvailable = GetNullableObjectAtIndex(list, 3);
-  NSAssert(pigeonResult.flashAvailable != nil, @"");
+  pigeonResult.iso = [GetNullableObjectAtIndex(list, 2) doubleValue];
+  pigeonResult.flashAvailable = [GetNullableObjectAtIndex(list, 3) boolValue];
   pigeonResult.uid = GetNullableObjectAtIndex(list, 4);
-  NSAssert(pigeonResult.uid != nil, @"");
   return pigeonResult;
 }
-+ (nullable PigeonSensorTypeDevice *)nullableFromList:(NSArray *)list {
++ (nullable PigeonSensorTypeDevice *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [PigeonSensorTypeDevice fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    @(self.sensorType),
-    (self.name ?: [NSNull null]),
-    (self.iso ?: [NSNull null]),
-    (self.flashAvailable ?: [NSNull null]),
-    (self.uid ?: [NSNull null]),
+    [[PigeonSensorTypeBox alloc] initWithValue:self.sensorType],
+    self.name ?: [NSNull null],
+    @(self.iso),
+    @(self.flashAvailable),
+    self.uid ?: [NSNull null],
   ];
 }
 @end
 
 @implementation AndroidFocusSettings
-+ (instancetype)makeWithAutoCancelDurationInMillis:(NSNumber *)autoCancelDurationInMillis {
++ (instancetype)makeWithAutoCancelDurationInMillis:(NSInteger )autoCancelDurationInMillis {
   AndroidFocusSettings* pigeonResult = [[AndroidFocusSettings alloc] init];
   pigeonResult.autoCancelDurationInMillis = autoCancelDurationInMillis;
   return pigeonResult;
 }
-+ (AndroidFocusSettings *)fromList:(NSArray *)list {
++ (AndroidFocusSettings *)fromList:(NSArray<id> *)list {
   AndroidFocusSettings *pigeonResult = [[AndroidFocusSettings alloc] init];
-  pigeonResult.autoCancelDurationInMillis = GetNullableObjectAtIndex(list, 0);
-  NSAssert(pigeonResult.autoCancelDurationInMillis != nil, @"");
+  pigeonResult.autoCancelDurationInMillis = [GetNullableObjectAtIndex(list, 0) integerValue];
   return pigeonResult;
 }
-+ (nullable AndroidFocusSettings *)nullableFromList:(NSArray *)list {
++ (nullable AndroidFocusSettings *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [AndroidFocusSettings fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.autoCancelDurationInMillis ?: [NSNull null]),
+    @(self.autoCancelDurationInMillis),
   ];
 }
 @end
 
 @implementation PlaneWrapper
 + (instancetype)makeWithBytes:(FlutterStandardTypedData *)bytes
-    bytesPerRow:(NSNumber *)bytesPerRow
+    bytesPerRow:(NSInteger )bytesPerRow
     bytesPerPixel:(nullable NSNumber *)bytesPerPixel
     width:(nullable NSNumber *)width
     height:(nullable NSNumber *)height {
@@ -330,36 +433,34 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
   pigeonResult.height = height;
   return pigeonResult;
 }
-+ (PlaneWrapper *)fromList:(NSArray *)list {
++ (PlaneWrapper *)fromList:(NSArray<id> *)list {
   PlaneWrapper *pigeonResult = [[PlaneWrapper alloc] init];
   pigeonResult.bytes = GetNullableObjectAtIndex(list, 0);
-  NSAssert(pigeonResult.bytes != nil, @"");
-  pigeonResult.bytesPerRow = GetNullableObjectAtIndex(list, 1);
-  NSAssert(pigeonResult.bytesPerRow != nil, @"");
+  pigeonResult.bytesPerRow = [GetNullableObjectAtIndex(list, 1) integerValue];
   pigeonResult.bytesPerPixel = GetNullableObjectAtIndex(list, 2);
   pigeonResult.width = GetNullableObjectAtIndex(list, 3);
   pigeonResult.height = GetNullableObjectAtIndex(list, 4);
   return pigeonResult;
 }
-+ (nullable PlaneWrapper *)nullableFromList:(NSArray *)list {
++ (nullable PlaneWrapper *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [PlaneWrapper fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.bytes ?: [NSNull null]),
-    (self.bytesPerRow ?: [NSNull null]),
-    (self.bytesPerPixel ?: [NSNull null]),
-    (self.width ?: [NSNull null]),
-    (self.height ?: [NSNull null]),
+    self.bytes ?: [NSNull null],
+    @(self.bytesPerRow),
+    self.bytesPerPixel ?: [NSNull null],
+    self.width ?: [NSNull null],
+    self.height ?: [NSNull null],
   ];
 }
 @end
 
 @implementation CropRectWrapper
-+ (instancetype)makeWithLeft:(NSNumber *)left
-    top:(NSNumber *)top
-    width:(NSNumber *)width
-    height:(NSNumber *)height {
++ (instancetype)makeWithLeft:(NSInteger )left
+    top:(NSInteger )top
+    width:(NSInteger )width
+    height:(NSInteger )height {
   CropRectWrapper* pigeonResult = [[CropRectWrapper alloc] init];
   pigeonResult.left = left;
   pigeonResult.top = top;
@@ -367,27 +468,23 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
   pigeonResult.height = height;
   return pigeonResult;
 }
-+ (CropRectWrapper *)fromList:(NSArray *)list {
++ (CropRectWrapper *)fromList:(NSArray<id> *)list {
   CropRectWrapper *pigeonResult = [[CropRectWrapper alloc] init];
-  pigeonResult.left = GetNullableObjectAtIndex(list, 0);
-  NSAssert(pigeonResult.left != nil, @"");
-  pigeonResult.top = GetNullableObjectAtIndex(list, 1);
-  NSAssert(pigeonResult.top != nil, @"");
-  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
-  NSAssert(pigeonResult.width != nil, @"");
-  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
-  NSAssert(pigeonResult.height != nil, @"");
+  pigeonResult.left = [GetNullableObjectAtIndex(list, 0) integerValue];
+  pigeonResult.top = [GetNullableObjectAtIndex(list, 1) integerValue];
+  pigeonResult.width = [GetNullableObjectAtIndex(list, 2) integerValue];
+  pigeonResult.height = [GetNullableObjectAtIndex(list, 3) integerValue];
   return pigeonResult;
 }
-+ (nullable CropRectWrapper *)nullableFromList:(NSArray *)list {
++ (nullable CropRectWrapper *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [CropRectWrapper fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    (self.left ?: [NSNull null]),
-    (self.top ?: [NSNull null]),
-    (self.width ?: [NSNull null]),
-    (self.height ?: [NSNull null]),
+    @(self.left),
+    @(self.top),
+    @(self.width),
+    @(self.height),
   ];
 }
 @end
@@ -395,11 +492,11 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
 @implementation AnalysisImageWrapper
 + (instancetype)makeWithFormat:(AnalysisImageFormat)format
     bytes:(nullable FlutterStandardTypedData *)bytes
-    width:(NSNumber *)width
-    height:(NSNumber *)height
+    width:(NSInteger )width
+    height:(NSInteger )height
     planes:(nullable NSArray<PlaneWrapper *> *)planes
     cropRect:(nullable CropRectWrapper *)cropRect
-    rotation:(AnalysisRotation)rotation {
+    rotation:(nullable AnalysisRotationBox *)rotation {
   AnalysisImageWrapper* pigeonResult = [[AnalysisImageWrapper alloc] init];
   pigeonResult.format = format;
   pigeonResult.bytes = bytes;
@@ -410,64 +507,175 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
   pigeonResult.rotation = rotation;
   return pigeonResult;
 }
-+ (AnalysisImageWrapper *)fromList:(NSArray *)list {
++ (AnalysisImageWrapper *)fromList:(NSArray<id> *)list {
   AnalysisImageWrapper *pigeonResult = [[AnalysisImageWrapper alloc] init];
-  pigeonResult.format = [GetNullableObjectAtIndex(list, 0) integerValue];
+  AnalysisImageFormatBox *boxedAnalysisImageFormat = GetNullableObjectAtIndex(list, 0);
+  pigeonResult.format = boxedAnalysisImageFormat.value;
   pigeonResult.bytes = GetNullableObjectAtIndex(list, 1);
-  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
-  NSAssert(pigeonResult.width != nil, @"");
-  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
-  NSAssert(pigeonResult.height != nil, @"");
+  pigeonResult.width = [GetNullableObjectAtIndex(list, 2) integerValue];
+  pigeonResult.height = [GetNullableObjectAtIndex(list, 3) integerValue];
   pigeonResult.planes = GetNullableObjectAtIndex(list, 4);
-  pigeonResult.cropRect = [CropRectWrapper nullableFromList:(GetNullableObjectAtIndex(list, 5))];
-  pigeonResult.rotation = [GetNullableObjectAtIndex(list, 6) integerValue];
+  pigeonResult.cropRect = GetNullableObjectAtIndex(list, 5);
+  pigeonResult.rotation = GetNullableObjectAtIndex(list, 6);
   return pigeonResult;
 }
-+ (nullable AnalysisImageWrapper *)nullableFromList:(NSArray *)list {
++ (nullable AnalysisImageWrapper *)nullableFromList:(NSArray<id> *)list {
   return (list) ? [AnalysisImageWrapper fromList:list] : nil;
 }
-- (NSArray *)toList {
+- (NSArray<id> *)toList {
   return @[
-    @(self.format),
-    (self.bytes ?: [NSNull null]),
-    (self.width ?: [NSNull null]),
-    (self.height ?: [NSNull null]),
-    (self.planes ?: [NSNull null]),
-    (self.cropRect ? [self.cropRect toList] : [NSNull null]),
-    @(self.rotation),
+    [[AnalysisImageFormatBox alloc] initWithValue:self.format],
+    self.bytes ?: [NSNull null],
+    @(self.width),
+    @(self.height),
+    self.planes ?: [NSNull null],
+    self.cropRect ?: [NSNull null],
+    self.rotation ?: [NSNull null],
   ];
 }
 @end
 
-@interface AnalysisImageUtilsCodecReader : FlutterStandardReader
+@interface nullPigeonPigeonCodecReader : FlutterStandardReader
 @end
-@implementation AnalysisImageUtilsCodecReader
+@implementation nullPigeonPigeonCodecReader
 - (nullable id)readValueOfType:(UInt8)type {
   switch (type) {
-    case 128: 
-      return [AnalysisImageWrapper fromList:[self readValue]];
-    case 129: 
-      return [CropRectWrapper fromList:[self readValue]];
-    case 130: 
+    case 129: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[PigeonSensorPositionBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 130: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[VideoRecordingQualityBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 131: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[QualityFallbackStrategyBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 132: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[CupertinoFileTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 133: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[CupertinoCodecTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 134: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[PigeonSensorTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 135: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[CamerAwesomePermissionBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 136: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[AnalysisImageFormatBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 137: {
+      NSNumber *enumAsNumber = [self readValue];
+      return enumAsNumber == nil ? nil : [[AnalysisRotationBox alloc] initWithValue:[enumAsNumber integerValue]];
+    }
+    case 138: 
+      return [PreviewSize fromList:[self readValue]];
+    case 139: 
+      return [ExifPreferences fromList:[self readValue]];
+    case 140: 
+      return [PigeonSensor fromList:[self readValue]];
+    case 141: 
+      return [VideoOptions fromList:[self readValue]];
+    case 142: 
+      return [AndroidVideoOptions fromList:[self readValue]];
+    case 143: 
+      return [CupertinoVideoOptions fromList:[self readValue]];
+    case 144: 
+      return [PigeonSensorTypeDevice fromList:[self readValue]];
+    case 145: 
+      return [AndroidFocusSettings fromList:[self readValue]];
+    case 146: 
       return [PlaneWrapper fromList:[self readValue]];
+    case 147: 
+      return [CropRectWrapper fromList:[self readValue]];
+    case 148: 
+      return [AnalysisImageWrapper fromList:[self readValue]];
     default:
       return [super readValueOfType:type];
   }
 }
 @end
 
-@interface AnalysisImageUtilsCodecWriter : FlutterStandardWriter
+@interface nullPigeonPigeonCodecWriter : FlutterStandardWriter
 @end
-@implementation AnalysisImageUtilsCodecWriter
+@implementation nullPigeonPigeonCodecWriter
 - (void)writeValue:(id)value {
-  if ([value isKindOfClass:[AnalysisImageWrapper class]]) {
-    [self writeByte:128];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[CropRectWrapper class]]) {
+  if ([value isKindOfClass:[PigeonSensorPositionBox class]]) {
+    PigeonSensorPositionBox *box = (PigeonSensorPositionBox *)value;
     [self writeByte:129];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[VideoRecordingQualityBox class]]) {
+    VideoRecordingQualityBox *box = (VideoRecordingQualityBox *)value;
+    [self writeByte:130];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[QualityFallbackStrategyBox class]]) {
+    QualityFallbackStrategyBox *box = (QualityFallbackStrategyBox *)value;
+    [self writeByte:131];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[CupertinoFileTypeBox class]]) {
+    CupertinoFileTypeBox *box = (CupertinoFileTypeBox *)value;
+    [self writeByte:132];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[CupertinoCodecTypeBox class]]) {
+    CupertinoCodecTypeBox *box = (CupertinoCodecTypeBox *)value;
+    [self writeByte:133];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[PigeonSensorTypeBox class]]) {
+    PigeonSensorTypeBox *box = (PigeonSensorTypeBox *)value;
+    [self writeByte:134];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[CamerAwesomePermissionBox class]]) {
+    CamerAwesomePermissionBox *box = (CamerAwesomePermissionBox *)value;
+    [self writeByte:135];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[AnalysisImageFormatBox class]]) {
+    AnalysisImageFormatBox *box = (AnalysisImageFormatBox *)value;
+    [self writeByte:136];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[AnalysisRotationBox class]]) {
+    AnalysisRotationBox *box = (AnalysisRotationBox *)value;
+    [self writeByte:137];
+    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
+  } else if ([value isKindOfClass:[PreviewSize class]]) {
+    [self writeByte:138];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[ExifPreferences class]]) {
+    [self writeByte:139];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[PigeonSensor class]]) {
+    [self writeByte:140];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[VideoOptions class]]) {
+    [self writeByte:141];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[AndroidVideoOptions class]]) {
+    [self writeByte:142];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[CupertinoVideoOptions class]]) {
+    [self writeByte:143];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[PigeonSensorTypeDevice class]]) {
+    [self writeByte:144];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[AndroidFocusSettings class]]) {
+    [self writeByte:145];
     [self writeValue:[value toList]];
   } else if ([value isKindOfClass:[PlaneWrapper class]]) {
-    [self writeByte:130];
+    [self writeByte:146];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[CropRectWrapper class]]) {
+    [self writeByte:147];
+    [self writeValue:[value toList]];
+  } else if ([value isKindOfClass:[AnalysisImageWrapper class]]) {
+    [self writeByte:148];
     [self writeValue:[value toList]];
   } else {
     [super writeValue:value];
@@ -475,40 +683,44 @@ static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
 }
 @end
 
-@interface AnalysisImageUtilsCodecReaderWriter : FlutterStandardReaderWriter
+@interface nullPigeonPigeonCodecReaderWriter : FlutterStandardReaderWriter
 @end
-@implementation AnalysisImageUtilsCodecReaderWriter
+@implementation nullPigeonPigeonCodecReaderWriter
 - (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
-  return [[AnalysisImageUtilsCodecWriter alloc] initWithData:data];
+  return [[nullPigeonPigeonCodecWriter alloc] initWithData:data];
 }
 - (FlutterStandardReader *)readerWithData:(NSData *)data {
-  return [[AnalysisImageUtilsCodecReader alloc] initWithData:data];
+  return [[nullPigeonPigeonCodecReader alloc] initWithData:data];
 }
 @end
 
-NSObject<FlutterMessageCodec> *AnalysisImageUtilsGetCodec(void) {
+NSObject<FlutterMessageCodec> *nullGetPigeonCodec(void) {
   static FlutterStandardMessageCodec *sSharedObject = nil;
   static dispatch_once_t sPred = 0;
   dispatch_once(&sPred, ^{
-    AnalysisImageUtilsCodecReaderWriter *readerWriter = [[AnalysisImageUtilsCodecReaderWriter alloc] init];
+    nullPigeonPigeonCodecReaderWriter *readerWriter = [[nullPigeonPigeonCodecReaderWriter alloc] init];
     sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
   });
   return sSharedObject;
 }
+void SetUpAnalysisImageUtils(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AnalysisImageUtils> *api) {
+  SetUpAnalysisImageUtilsWithSuffix(binaryMessenger, api, @"");
+}
 
-void AnalysisImageUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AnalysisImageUtils> *api) {
+void SetUpAnalysisImageUtilsWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AnalysisImageUtils> *api, NSString *messageChannelSuffix) {
+  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.AnalysisImageUtils.nv21toJpeg"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.AnalysisImageUtils.nv21toJpeg", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:AnalysisImageUtilsGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(nv21toJpegNv21Image:jpegQuality:completion:)], @"AnalysisImageUtils api (%@) doesn't respond to @selector(nv21toJpegNv21Image:jpegQuality:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         AnalysisImageWrapper *arg_nv21Image = GetNullableObjectAtIndex(args, 0);
-        NSNumber *arg_jpegQuality = GetNullableObjectAtIndex(args, 1);
+        NSInteger arg_jpegQuality = [GetNullableObjectAtIndex(args, 1) integerValue];
         [api nv21toJpegNv21Image:arg_nv21Image jpegQuality:arg_jpegQuality completion:^(AnalysisImageWrapper *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
         }];
@@ -520,15 +732,15 @@ void AnalysisImageUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObjec
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.AnalysisImageUtils.yuv420toJpeg"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.AnalysisImageUtils.yuv420toJpeg", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:AnalysisImageUtilsGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(yuv420toJpegYuvImage:jpegQuality:completion:)], @"AnalysisImageUtils api (%@) doesn't respond to @selector(yuv420toJpegYuvImage:jpegQuality:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         AnalysisImageWrapper *arg_yuvImage = GetNullableObjectAtIndex(args, 0);
-        NSNumber *arg_jpegQuality = GetNullableObjectAtIndex(args, 1);
+        NSInteger arg_jpegQuality = [GetNullableObjectAtIndex(args, 1) integerValue];
         [api yuv420toJpegYuvImage:arg_yuvImage jpegQuality:arg_jpegQuality completion:^(AnalysisImageWrapper *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
         }];
@@ -540,13 +752,13 @@ void AnalysisImageUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObjec
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.AnalysisImageUtils.yuv420toNv21"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.AnalysisImageUtils.yuv420toNv21", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:AnalysisImageUtilsGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(yuv420toNv21YuvImage:completion:)], @"AnalysisImageUtils api (%@) doesn't respond to @selector(yuv420toNv21YuvImage:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         AnalysisImageWrapper *arg_yuvImage = GetNullableObjectAtIndex(args, 0);
         [api yuv420toNv21YuvImage:arg_yuvImage completion:^(AnalysisImageWrapper *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
@@ -559,15 +771,15 @@ void AnalysisImageUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObjec
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.AnalysisImageUtils.bgra8888toJpeg"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.AnalysisImageUtils.bgra8888toJpeg", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:AnalysisImageUtilsGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(bgra8888toJpegBgra8888image:jpegQuality:completion:)], @"AnalysisImageUtils api (%@) doesn't respond to @selector(bgra8888toJpegBgra8888image:jpegQuality:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         AnalysisImageWrapper *arg_bgra8888image = GetNullableObjectAtIndex(args, 0);
-        NSNumber *arg_jpegQuality = GetNullableObjectAtIndex(args, 1);
+        NSInteger arg_jpegQuality = [GetNullableObjectAtIndex(args, 1) integerValue];
         [api bgra8888toJpegBgra8888image:arg_bgra8888image jpegQuality:arg_jpegQuality completion:^(AnalysisImageWrapper *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
         }];
@@ -577,112 +789,30 @@ void AnalysisImageUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObjec
     }
   }
 }
-@interface CameraInterfaceCodecReader : FlutterStandardReader
-@end
-@implementation CameraInterfaceCodecReader
-- (nullable id)readValueOfType:(UInt8)type {
-  switch (type) {
-    case 128: 
-      return [AndroidFocusSettings fromList:[self readValue]];
-    case 129: 
-      return [AndroidVideoOptions fromList:[self readValue]];
-    case 130: 
-      return [CupertinoVideoOptions fromList:[self readValue]];
-    case 131: 
-      return [ExifPreferences fromList:[self readValue]];
-    case 132: 
-      return [PigeonSensor fromList:[self readValue]];
-    case 133: 
-      return [PigeonSensorTypeDevice fromList:[self readValue]];
-    case 134: 
-      return [PreviewSize fromList:[self readValue]];
-    case 135: 
-      return [PreviewSize fromList:[self readValue]];
-    case 136: 
-      return [VideoOptions fromList:[self readValue]];
-    default:
-      return [super readValueOfType:type];
-  }
-}
-@end
-
-@interface CameraInterfaceCodecWriter : FlutterStandardWriter
-@end
-@implementation CameraInterfaceCodecWriter
-- (void)writeValue:(id)value {
-  if ([value isKindOfClass:[AndroidFocusSettings class]]) {
-    [self writeByte:128];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[AndroidVideoOptions class]]) {
-    [self writeByte:129];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[CupertinoVideoOptions class]]) {
-    [self writeByte:130];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[ExifPreferences class]]) {
-    [self writeByte:131];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[PigeonSensor class]]) {
-    [self writeByte:132];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[PigeonSensorTypeDevice class]]) {
-    [self writeByte:133];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[PreviewSize class]]) {
-    [self writeByte:134];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[PreviewSize class]]) {
-    [self writeByte:135];
-    [self writeValue:[value toList]];
-  } else if ([value isKindOfClass:[VideoOptions class]]) {
-    [self writeByte:136];
-    [self writeValue:[value toList]];
-  } else {
-    [super writeValue:value];
-  }
-}
-@end
-
-@interface CameraInterfaceCodecReaderWriter : FlutterStandardReaderWriter
-@end
-@implementation CameraInterfaceCodecReaderWriter
-- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
-  return [[CameraInterfaceCodecWriter alloc] initWithData:data];
-}
-- (FlutterStandardReader *)readerWithData:(NSData *)data {
-  return [[CameraInterfaceCodecReader alloc] initWithData:data];
-}
-@end
-
-NSObject<FlutterMessageCodec> *CameraInterfaceGetCodec(void) {
-  static FlutterStandardMessageCodec *sSharedObject = nil;
-  static dispatch_once_t sPred = 0;
-  dispatch_once(&sPred, ^{
-    CameraInterfaceCodecReaderWriter *readerWriter = [[CameraInterfaceCodecReaderWriter alloc] init];
-    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
-  });
-  return sSharedObject;
+void SetUpCameraInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraInterface> *api) {
+  SetUpCameraInterfaceWithSuffix(binaryMessenger, api, @"");
 }
 
-void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraInterface> *api) {
+void SetUpCameraInterfaceWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraInterface> *api, NSString *messageChannelSuffix) {
+  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setupCamera"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setupCamera", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setupCameraSensors:aspectRatio:zoom:mirrorFrontCamera:enablePhysicalButton:flashMode:captureMode:enableImageStream:exifPreferences:videoOptions:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(setupCameraSensors:aspectRatio:zoom:mirrorFrontCamera:enablePhysicalButton:flashMode:captureMode:enableImageStream:exifPreferences:videoOptions:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSArray<PigeonSensor *> *arg_sensors = GetNullableObjectAtIndex(args, 0);
         NSString *arg_aspectRatio = GetNullableObjectAtIndex(args, 1);
-        NSNumber *arg_zoom = GetNullableObjectAtIndex(args, 2);
-        NSNumber *arg_mirrorFrontCamera = GetNullableObjectAtIndex(args, 3);
-        NSNumber *arg_enablePhysicalButton = GetNullableObjectAtIndex(args, 4);
+        double arg_zoom = [GetNullableObjectAtIndex(args, 2) doubleValue];
+        BOOL arg_mirrorFrontCamera = [GetNullableObjectAtIndex(args, 3) boolValue];
+        BOOL arg_enablePhysicalButton = [GetNullableObjectAtIndex(args, 4) boolValue];
         NSString *arg_flashMode = GetNullableObjectAtIndex(args, 5);
         NSString *arg_captureMode = GetNullableObjectAtIndex(args, 6);
-        NSNumber *arg_enableImageStream = GetNullableObjectAtIndex(args, 7);
+        BOOL arg_enableImageStream = [GetNullableObjectAtIndex(args, 7) boolValue];
         ExifPreferences *arg_exifPreferences = GetNullableObjectAtIndex(args, 8);
         VideoOptions *arg_videoOptions = GetNullableObjectAtIndex(args, 9);
         [api setupCameraSensors:arg_sensors aspectRatio:arg_aspectRatio zoom:arg_zoom mirrorFrontCamera:arg_mirrorFrontCamera enablePhysicalButton:arg_enablePhysicalButton flashMode:arg_flashMode captureMode:arg_captureMode enableImageStream:arg_enableImageStream exifPreferences:arg_exifPreferences videoOptions:arg_videoOptions completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
@@ -696,13 +826,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.checkPermissions"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.checkPermissions", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(checkPermissionsPermissions:error:)], @"CameraInterface api (%@) doesn't respond to @selector(checkPermissionsPermissions:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSArray<NSString *> *arg_permissions = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         NSArray<NSString *> *output = [api checkPermissionsPermissions:arg_permissions error:&error];
@@ -717,14 +847,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.requestPermissions"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.requestPermissions", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(requestPermissionsSaveGpsLocation:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(requestPermissionsSaveGpsLocation:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_saveGpsLocation = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        BOOL arg_saveGpsLocation = [GetNullableObjectAtIndex(args, 0) boolValue];
         [api requestPermissionsSaveGpsLocation:arg_saveGpsLocation completion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
         }];
@@ -736,14 +866,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.getPreviewTextureId"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.getPreviewTextureId", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(getPreviewTextureIdCameraPosition:error:)], @"CameraInterface api (%@) doesn't respond to @selector(getPreviewTextureIdCameraPosition:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_cameraPosition = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        NSInteger arg_cameraPosition = [GetNullableObjectAtIndex(args, 0) integerValue];
         FlutterError *error;
         NSNumber *output = [api getPreviewTextureIdCameraPosition:arg_cameraPosition error:&error];
         callback(wrapResult(output, error));
@@ -755,13 +885,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.takePhoto"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.takePhoto", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(takePhotoSensors:paths:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(takePhotoSensors:paths:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSArray<PigeonSensor *> *arg_sensors = GetNullableObjectAtIndex(args, 0);
         NSArray<NSString *> *arg_paths = GetNullableObjectAtIndex(args, 1);
         [api takePhotoSensors:arg_sensors paths:arg_paths completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
@@ -775,13 +905,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.recordVideo"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.recordVideo", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(recordVideoSensors:paths:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(recordVideoSensors:paths:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSArray<PigeonSensor *> *arg_sensors = GetNullableObjectAtIndex(args, 0);
         NSArray<NSString *> *arg_paths = GetNullableObjectAtIndex(args, 1);
         [api recordVideoSensors:arg_sensors paths:arg_paths completion:^(FlutterError *_Nullable error) {
@@ -795,9 +925,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.pauseVideoRecording"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.pauseVideoRecording", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(pauseVideoRecordingWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(pauseVideoRecordingWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -812,9 +942,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.resumeVideoRecording"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.resumeVideoRecording", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(resumeVideoRecordingWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(resumeVideoRecordingWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -829,9 +959,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.receivedImageFromStream"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.receivedImageFromStream", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(receivedImageFromStreamWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(receivedImageFromStreamWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -846,9 +976,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.stopRecordingVideo"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.stopRecordingVideo", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(stopRecordingVideoWithCompletion:)], @"CameraInterface api (%@) doesn't respond to @selector(stopRecordingVideoWithCompletion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -863,9 +993,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.getFrontSensors"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.getFrontSensors", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(getFrontSensorsWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(getFrontSensorsWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -880,9 +1010,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.getBackSensors"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.getBackSensors", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(getBackSensorsWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(getBackSensorsWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -897,9 +1027,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.start"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.start", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(startWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(startWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -914,9 +1044,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.stop"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.stop", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(stopWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(stopWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -931,13 +1061,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setFlashMode"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setFlashMode", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setFlashModeMode:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setFlashModeMode:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setFlashModeMode:arg_mode error:&error];
@@ -950,9 +1080,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.handleAutoFocus"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.handleAutoFocus", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(handleAutoFocusWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(handleAutoFocusWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -971,16 +1101,16 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.focusOnPoint"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.focusOnPoint", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(focusOnPointPreviewSize:x:y:androidFocusSettings:error:)], @"CameraInterface api (%@) doesn't respond to @selector(focusOnPointPreviewSize:x:y:androidFocusSettings:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         PreviewSize *arg_previewSize = GetNullableObjectAtIndex(args, 0);
-        NSNumber *arg_x = GetNullableObjectAtIndex(args, 1);
-        NSNumber *arg_y = GetNullableObjectAtIndex(args, 2);
+        double arg_x = [GetNullableObjectAtIndex(args, 1) doubleValue];
+        double arg_y = [GetNullableObjectAtIndex(args, 2) doubleValue];
         AndroidFocusSettings *arg_androidFocusSettings = GetNullableObjectAtIndex(args, 3);
         FlutterError *error;
         [api focusOnPointPreviewSize:arg_previewSize x:arg_x y:arg_y androidFocusSettings:arg_androidFocusSettings error:&error];
@@ -993,14 +1123,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setZoom"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setZoom", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setZoomZoom:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setZoomZoom:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_zoom = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        double arg_zoom = [GetNullableObjectAtIndex(args, 0) doubleValue];
         FlutterError *error;
         [api setZoomZoom:arg_zoom error:&error];
         callback(wrapResult(nil, error));
@@ -1012,14 +1142,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setMirrorFrontCamera"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setMirrorFrontCamera", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setMirrorFrontCameraMirror:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setMirrorFrontCameraMirror:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_mirror = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        BOOL arg_mirror = [GetNullableObjectAtIndex(args, 0) boolValue];
         FlutterError *error;
         [api setMirrorFrontCameraMirror:arg_mirror error:&error];
         callback(wrapResult(nil, error));
@@ -1031,13 +1161,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setSensor"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setSensor", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setSensorSensors:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setSensorSensors:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSArray<PigeonSensor *> *arg_sensors = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setSensorSensors:arg_sensors error:&error];
@@ -1050,14 +1180,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setCorrection"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setCorrection", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setCorrectionBrightness:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setCorrectionBrightness:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_brightness = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        double arg_brightness = [GetNullableObjectAtIndex(args, 0) doubleValue];
         FlutterError *error;
         [api setCorrectionBrightness:arg_brightness error:&error];
         callback(wrapResult(nil, error));
@@ -1069,9 +1199,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.getMinZoom"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.getMinZoom", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(getMinZoomWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(getMinZoomWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -1086,9 +1216,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.getMaxZoom"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.getMaxZoom", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(getMaxZoomWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(getMaxZoomWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -1103,13 +1233,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setCaptureMode"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setCaptureMode", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setCaptureModeMode:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setCaptureModeMode:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setCaptureModeMode:arg_mode error:&error];
@@ -1122,14 +1252,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setRecordingAudioMode"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setRecordingAudioMode", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setRecordingAudioModeEnableAudio:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(setRecordingAudioModeEnableAudio:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_enableAudio = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        BOOL arg_enableAudio = [GetNullableObjectAtIndex(args, 0) boolValue];
         [api setRecordingAudioModeEnableAudio:arg_enableAudio completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
         }];
@@ -1141,9 +1271,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.availableSizes"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.availableSizes", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(availableSizesWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(availableSizesWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -1158,9 +1288,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.refresh"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.refresh", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(refreshWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(refreshWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -1175,14 +1305,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.getEffectivPreviewSize"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.getEffectivPreviewSize", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(getEffectivPreviewSizeIndex:error:)], @"CameraInterface api (%@) doesn't respond to @selector(getEffectivPreviewSizeIndex:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSNumber *arg_index = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        NSInteger arg_index = [GetNullableObjectAtIndex(args, 0) integerValue];
         FlutterError *error;
         PreviewSize *output = [api getEffectivPreviewSizeIndex:arg_index error:&error];
         callback(wrapResult(output, error));
@@ -1194,13 +1324,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setPhotoSize"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setPhotoSize", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setPhotoSizeSize:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setPhotoSizeSize:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         PreviewSize *arg_size = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setPhotoSizeSize:arg_size error:&error];
@@ -1213,13 +1343,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setPreviewSize"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setPreviewSize", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setPreviewSizeSize:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setPreviewSizeSize:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         PreviewSize *arg_size = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setPreviewSizeSize:arg_size error:&error];
@@ -1232,13 +1362,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setAspectRatio"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setAspectRatio", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setAspectRatioAspectRatio:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setAspectRatioAspectRatio:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSString *arg_aspectRatio = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setAspectRatioAspectRatio:arg_aspectRatio error:&error];
@@ -1251,17 +1381,17 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setupImageAnalysisStream"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setupImageAnalysisStream", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setupImageAnalysisStreamFormat:width:maxFramesPerSecond:autoStart:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setupImageAnalysisStreamFormat:width:maxFramesPerSecond:autoStart:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         NSString *arg_format = GetNullableObjectAtIndex(args, 0);
-        NSNumber *arg_width = GetNullableObjectAtIndex(args, 1);
+        NSInteger arg_width = [GetNullableObjectAtIndex(args, 1) integerValue];
         NSNumber *arg_maxFramesPerSecond = GetNullableObjectAtIndex(args, 2);
-        NSNumber *arg_autoStart = GetNullableObjectAtIndex(args, 3);
+        BOOL arg_autoStart = [GetNullableObjectAtIndex(args, 3) boolValue];
         FlutterError *error;
         [api setupImageAnalysisStreamFormat:arg_format width:arg_width maxFramesPerSecond:arg_maxFramesPerSecond autoStart:arg_autoStart error:&error];
         callback(wrapResult(nil, error));
@@ -1273,13 +1403,13 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setExifPreferences"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setExifPreferences", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setExifPreferencesExifPreferences:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(setExifPreferencesExifPreferences:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
+        NSArray<id> *args = message;
         ExifPreferences *arg_exifPreferences = GetNullableObjectAtIndex(args, 0);
         [api setExifPreferencesExifPreferences:arg_exifPreferences completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
@@ -1292,9 +1422,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.startAnalysis"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.startAnalysis", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(startAnalysisWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(startAnalysisWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -1309,9 +1439,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.stopAnalysis"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.stopAnalysis", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(stopAnalysisWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(stopAnalysisWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
@@ -1326,14 +1456,14 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.setFilter"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.setFilter", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(setFilterMatrix:error:)], @"CameraInterface api (%@) doesn't respond to @selector(setFilterMatrix:error:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        NSArray<NSNumber *> *arg_matrix = GetNullableObjectAtIndex(args, 0);
+        NSArray<id> *args = message;
+        NSArray<double> *arg_matrix = GetNullableObjectAtIndex(args, 0);
         FlutterError *error;
         [api setFilterMatrix:arg_matrix error:&error];
         callback(wrapResult(nil, error));
@@ -1345,14 +1475,15 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.isVideoRecordingAndImageAnalysisSupported"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.isVideoRecordingAndImageAnalysisSupported", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(isVideoRecordingAndImageAnalysisSupportedSensor:completion:)], @"CameraInterface api (%@) doesn't respond to @selector(isVideoRecordingAndImageAnalysisSupportedSensor:completion:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
-        NSArray *args = message;
-        PigeonSensorPosition arg_sensor = [GetNullableObjectAtIndex(args, 0) integerValue];
+        NSArray<id> *args = message;
+        PigeonSensorPositionBox *boxedPigeonSensorPosition = GetNullableObjectAtIndex(args, 0);
+        PigeonSensorPosition arg_sensor = boxedPigeonSensorPosition.value;
         [api isVideoRecordingAndImageAnalysisSupportedSensor:arg_sensor completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
           callback(wrapResult(output, error));
         }];
@@ -1364,9 +1495,9 @@ void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<C
   {
     FlutterBasicMessageChannel *channel =
       [[FlutterBasicMessageChannel alloc]
-        initWithName:@"dev.flutter.pigeon.CameraInterface.isMultiCamSupported"
+        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.camerawesome.CameraInterface.isMultiCamSupported", messageChannelSuffix]
         binaryMessenger:binaryMessenger
-        codec:CameraInterfaceGetCodec()];
+        codec:nullGetPigeonCodec()];
     if (api) {
       NSCAssert([api respondsToSelector:@selector(isMultiCamSupportedWithError:)], @"CameraInterface api (%@) doesn't respond to @selector(isMultiCamSupportedWithError:)", api);
       [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
diff --git a/ios/camerawesome/Sources/camerawesome/include/Pigeon.h b/ios/camerawesome/Sources/camerawesome/include/Pigeon.h
index 46510d3..89d8750 100644
--- a/ios/camerawesome/Sources/camerawesome/include/Pigeon.h
+++ b/ios/camerawesome/Sources/camerawesome/include/Pigeon.h
@@ -1,4 +1,4 @@
-// Autogenerated from Pigeon (v9.2.5), do not edit directly.
+// Autogenerated from Pigeon (v21.2.0), do not edit directly.
 // See also: https://pub.dev/packages/pigeon
 
 #import <Foundation/Foundation.h>
@@ -16,6 +16,12 @@ typedef NS_ENUM(NSUInteger, PigeonSensorPosition) {
   PigeonSensorPositionUnknown = 2,
 };
 
+/// Wrapper for PigeonSensorPosition to allow for nullability.
+@interface PigeonSensorPositionBox : NSObject
+@property(nonatomic, assign) PigeonSensorPosition value;
+- (instancetype)initWithValue:(PigeonSensorPosition)value;
+@end
+
 /// Video recording quality, from [sd] to [uhd], with [highest] and [lowest] to
 /// let the device choose the best/worst quality available.
 /// [highest] is the default quality.
@@ -31,6 +37,12 @@ typedef NS_ENUM(NSUInteger, VideoRecordingQuality) {
   VideoRecordingQualityHighest = 5,
 };
 
+/// Wrapper for VideoRecordingQuality to allow for nullability.
+@interface VideoRecordingQualityBox : NSObject
+@property(nonatomic, assign) VideoRecordingQuality value;
+- (instancetype)initWithValue:(VideoRecordingQuality)value;
+@end
+
 /// If the specified [VideoRecordingQuality] is not available on the device,
 /// the [VideoRecordingQuality] will fallback to [higher] or [lower] quality.
 /// [higher] is the default fallback strategy.
@@ -39,6 +51,12 @@ typedef NS_ENUM(NSUInteger, QualityFallbackStrategy) {
   QualityFallbackStrategyLower = 1,
 };
 
+/// Wrapper for QualityFallbackStrategy to allow for nullability.
+@interface QualityFallbackStrategyBox : NSObject
+@property(nonatomic, assign) QualityFallbackStrategy value;
+- (instancetype)initWithValue:(QualityFallbackStrategy)value;
+@end
+
 typedef NS_ENUM(NSUInteger, CupertinoFileType) {
   CupertinoFileTypeQuickTimeMovie = 0,
   CupertinoFileTypeMpeg4 = 1,
@@ -47,6 +65,12 @@ typedef NS_ENUM(NSUInteger, CupertinoFileType) {
   CupertinoFileTypeType3GPP2 = 4,
 };
 
+/// Wrapper for CupertinoFileType to allow for nullability.
+@interface CupertinoFileTypeBox : NSObject
+@property(nonatomic, assign) CupertinoFileType value;
+- (instancetype)initWithValue:(CupertinoFileType)value;
+@end
+
 typedef NS_ENUM(NSUInteger, CupertinoCodecType) {
   CupertinoCodecTypeH264 = 0,
   CupertinoCodecTypeHevc = 1,
@@ -59,6 +83,12 @@ typedef NS_ENUM(NSUInteger, CupertinoCodecType) {
   CupertinoCodecTypeAppleProRes422Proxy = 8,
 };
 
+/// Wrapper for CupertinoCodecType to allow for nullability.
+@interface CupertinoCodecTypeBox : NSObject
+@property(nonatomic, assign) CupertinoCodecType value;
+- (instancetype)initWithValue:(CupertinoCodecType)value;
+@end
+
 typedef NS_ENUM(NSUInteger, PigeonSensorType) {
   /// A built-in wide-angle camera.
   ///
@@ -75,6 +105,12 @@ typedef NS_ENUM(NSUInteger, PigeonSensorType) {
   PigeonSensorTypeUnknown = 4,
 };
 
+/// Wrapper for PigeonSensorType to allow for nullability.
+@interface PigeonSensorTypeBox : NSObject
+@property(nonatomic, assign) PigeonSensorType value;
+- (instancetype)initWithValue:(PigeonSensorType)value;
+@end
+
 typedef NS_ENUM(NSUInteger, CamerAwesomePermission) {
   CamerAwesomePermissionStorage = 0,
   CamerAwesomePermissionCamera = 1,
@@ -82,6 +118,12 @@ typedef NS_ENUM(NSUInteger, CamerAwesomePermission) {
   CamerAwesomePermissionRecord_audio = 3,
 };
 
+/// Wrapper for CamerAwesomePermission to allow for nullability.
+@interface CamerAwesomePermissionBox : NSObject
+@property(nonatomic, assign) CamerAwesomePermission value;
+- (instancetype)initWithValue:(CamerAwesomePermission)value;
+@end
+
 typedef NS_ENUM(NSUInteger, AnalysisImageFormat) {
   AnalysisImageFormatYuv_420 = 0,
   AnalysisImageFormatBgra8888 = 1,
@@ -90,6 +132,12 @@ typedef NS_ENUM(NSUInteger, AnalysisImageFormat) {
   AnalysisImageFormatUnknown = 4,
 };
 
+/// Wrapper for AnalysisImageFormat to allow for nullability.
+@interface AnalysisImageFormatBox : NSObject
+@property(nonatomic, assign) AnalysisImageFormat value;
+- (instancetype)initWithValue:(AnalysisImageFormat)value;
+@end
+
 typedef NS_ENUM(NSUInteger, AnalysisRotation) {
   AnalysisRotationRotation0deg = 0,
   AnalysisRotationRotation90deg = 1,
@@ -97,6 +145,12 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
   AnalysisRotationRotation270deg = 3,
 };
 
+/// Wrapper for AnalysisRotation to allow for nullability.
+@interface AnalysisRotationBox : NSObject
+@property(nonatomic, assign) AnalysisRotation value;
+- (instancetype)initWithValue:(AnalysisRotation)value;
+@end
+
 @class PreviewSize;
 @class ExifPreferences;
 @class PigeonSensor;
@@ -112,17 +166,17 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
 @interface PreviewSize : NSObject
 /// `init` unavailable to enforce nonnull fields, see the `make` class method.
 - (instancetype)init NS_UNAVAILABLE;
-+ (instancetype)makeWithWidth:(NSNumber *)width
-    height:(NSNumber *)height;
-@property(nonatomic, strong) NSNumber * width;
-@property(nonatomic, strong) NSNumber * height;
++ (instancetype)makeWithWidth:(double )width
+    height:(double )height;
+@property(nonatomic, assign) double  width;
+@property(nonatomic, assign) double  height;
 @end
 
 @interface ExifPreferences : NSObject
 /// `init` unavailable to enforce nonnull fields, see the `make` class method.
 - (instancetype)init NS_UNAVAILABLE;
-+ (instancetype)makeWithSaveGPSLocation:(NSNumber *)saveGPSLocation;
-@property(nonatomic, strong) NSNumber * saveGPSLocation;
++ (instancetype)makeWithSaveGPSLocation:(BOOL )saveGPSLocation;
+@property(nonatomic, assign) BOOL  saveGPSLocation;
 @end
 
 @interface PigeonSensor : NSObject
@@ -140,37 +194,40 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
 @interface VideoOptions : NSObject
 /// `init` unavailable to enforce nonnull fields, see the `make` class method.
 - (instancetype)init NS_UNAVAILABLE;
-+ (instancetype)makeWithEnableAudio:(NSNumber *)enableAudio
-    quality:(VideoRecordingQuality)quality
++ (instancetype)makeWithEnableAudio:(BOOL )enableAudio
+    quality:(nullable VideoRecordingQualityBox *)quality
     android:(nullable AndroidVideoOptions *)android
     ios:(nullable CupertinoVideoOptions *)ios;
 /// Enable audio while video recording
-@property(nonatomic, strong) NSNumber * enableAudio;
+@property(nonatomic, assign) BOOL  enableAudio;
 /// The quality of the video recording, defaults to [VideoRecordingQuality.highest].
-@property(nonatomic, assign) VideoRecordingQuality quality;
+@property(nonatomic, strong, nullable) VideoRecordingQualityBox * quality;
 @property(nonatomic, strong, nullable) AndroidVideoOptions * android;
 @property(nonatomic, strong, nullable) CupertinoVideoOptions * ios;
 @end
 
 @interface AndroidVideoOptions : NSObject
 + (instancetype)makeWithBitrate:(nullable NSNumber *)bitrate
-    fallbackStrategy:(QualityFallbackStrategy)fallbackStrategy;
+    fallbackStrategy:(nullable QualityFallbackStrategyBox *)fallbackStrategy;
 /// The bitrate of the video recording. Only set it if a custom bitrate is
 /// desired.
 @property(nonatomic, strong, nullable) NSNumber * bitrate;
-@property(nonatomic, assign) QualityFallbackStrategy fallbackStrategy;
+@property(nonatomic, strong, nullable) QualityFallbackStrategyBox * fallbackStrategy;
 @end
 
 @interface CupertinoVideoOptions : NSObject
-+ (instancetype)makeWithFileType:(CupertinoFileType)fileType
-    codec:(CupertinoCodecType)codec
-    fps:(nullable NSNumber *)fps;
++ (instancetype)makeWithFileType:(nullable CupertinoFileTypeBox *)fileType
+    codec:(nullable CupertinoCodecTypeBox *)codec
+    fps:(nullable NSNumber *)fps
+    colorSpace:(nullable NSNumber *)colorSpace;
 /// Specify video file type, defaults to [AVFileTypeQuickTimeMovie].
-@property(nonatomic, assign) CupertinoFileType fileType;
+@property(nonatomic, strong, nullable) CupertinoFileTypeBox * fileType;
 /// Specify video codec, defaults to [AVVideoCodecTypeH264].
-@property(nonatomic, assign) CupertinoCodecType codec;
+@property(nonatomic, strong, nullable) CupertinoCodecTypeBox * codec;
 /// Specify video fps, defaults to [30].
 @property(nonatomic, strong, nullable) NSNumber * fps;
+/// Specify video color space, defaults to [AVVideoColorSpaceSRGB].
+@property(nonatomic, strong, nullable) NSNumber * colorSpace;
 @end
 
 @interface PigeonSensorTypeDevice : NSObject
@@ -178,16 +235,16 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
 - (instancetype)init NS_UNAVAILABLE;
 + (instancetype)makeWithSensorType:(PigeonSensorType)sensorType
     name:(NSString *)name
-    iso:(NSNumber *)iso
-    flashAvailable:(NSNumber *)flashAvailable
+    iso:(double )iso
+    flashAvailable:(BOOL )flashAvailable
     uid:(NSString *)uid;
 @property(nonatomic, assign) PigeonSensorType sensorType;
 /// A localized device name for display in the user interface.
 @property(nonatomic, copy) NSString * name;
 /// The current exposure ISO value.
-@property(nonatomic, strong) NSNumber * iso;
+@property(nonatomic, assign) double  iso;
 /// A Boolean value that indicates whether the flash is currently available for use.
-@property(nonatomic, strong) NSNumber * flashAvailable;
+@property(nonatomic, assign) BOOL  flashAvailable;
 /// An identifier that uniquely identifies the device.
 @property(nonatomic, copy) NSString * uid;
 @end
@@ -195,26 +252,26 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
 @interface AndroidFocusSettings : NSObject
 /// `init` unavailable to enforce nonnull fields, see the `make` class method.
 - (instancetype)init NS_UNAVAILABLE;
-+ (instancetype)makeWithAutoCancelDurationInMillis:(NSNumber *)autoCancelDurationInMillis;
++ (instancetype)makeWithAutoCancelDurationInMillis:(NSInteger )autoCancelDurationInMillis;
 /// The auto focus will be canceled after the given [autoCancelDurationInMillis].
 /// If [autoCancelDurationInMillis] is equals to 0 (or less), the auto focus
 /// will **not** be canceled. A manual `focusOnPoint` call will be needed to
 /// focus on an other point.
 /// Minimal duration of [autoCancelDurationInMillis] is 1000 ms. If set
 /// between 0 (exclusive) and 1000 (exclusive), it will be raised to 1000.
-@property(nonatomic, strong) NSNumber * autoCancelDurationInMillis;
+@property(nonatomic, assign) NSInteger  autoCancelDurationInMillis;
 @end
 
 @interface PlaneWrapper : NSObject
 /// `init` unavailable to enforce nonnull fields, see the `make` class method.
 - (instancetype)init NS_UNAVAILABLE;
 + (instancetype)makeWithBytes:(FlutterStandardTypedData *)bytes
-    bytesPerRow:(NSNumber *)bytesPerRow
+    bytesPerRow:(NSInteger )bytesPerRow
     bytesPerPixel:(nullable NSNumber *)bytesPerPixel
     width:(nullable NSNumber *)width
     height:(nullable NSNumber *)height;
 @property(nonatomic, strong) FlutterStandardTypedData * bytes;
-@property(nonatomic, strong) NSNumber * bytesPerRow;
+@property(nonatomic, assign) NSInteger  bytesPerRow;
 @property(nonatomic, strong, nullable) NSNumber * bytesPerPixel;
 @property(nonatomic, strong, nullable) NSNumber * width;
 @property(nonatomic, strong, nullable) NSNumber * height;
@@ -223,14 +280,14 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
 @interface CropRectWrapper : NSObject
 /// `init` unavailable to enforce nonnull fields, see the `make` class method.
 - (instancetype)init NS_UNAVAILABLE;
-+ (instancetype)makeWithLeft:(NSNumber *)left
-    top:(NSNumber *)top
-    width:(NSNumber *)width
-    height:(NSNumber *)height;
-@property(nonatomic, strong) NSNumber * left;
-@property(nonatomic, strong) NSNumber * top;
-@property(nonatomic, strong) NSNumber * width;
-@property(nonatomic, strong) NSNumber * height;
++ (instancetype)makeWithLeft:(NSInteger )left
+    top:(NSInteger )top
+    width:(NSInteger )width
+    height:(NSInteger )height;
+@property(nonatomic, assign) NSInteger  left;
+@property(nonatomic, assign) NSInteger  top;
+@property(nonatomic, assign) NSInteger  width;
+@property(nonatomic, assign) NSInteger  height;
 @end
 
 @interface AnalysisImageWrapper : NSObject
@@ -238,44 +295,44 @@ typedef NS_ENUM(NSUInteger, AnalysisRotation) {
 - (instancetype)init NS_UNAVAILABLE;
 + (instancetype)makeWithFormat:(AnalysisImageFormat)format
     bytes:(nullable FlutterStandardTypedData *)bytes
-    width:(NSNumber *)width
-    height:(NSNumber *)height
+    width:(NSInteger )width
+    height:(NSInteger )height
     planes:(nullable NSArray<PlaneWrapper *> *)planes
     cropRect:(nullable CropRectWrapper *)cropRect
-    rotation:(AnalysisRotation)rotation;
+    rotation:(nullable AnalysisRotationBox *)rotation;
 @property(nonatomic, assign) AnalysisImageFormat format;
 @property(nonatomic, strong, nullable) FlutterStandardTypedData * bytes;
-@property(nonatomic, strong) NSNumber * width;
-@property(nonatomic, strong) NSNumber * height;
-@property(nonatomic, strong, nullable) NSArray<PlaneWrapper *> * planes;
+@property(nonatomic, assign) NSInteger  width;
+@property(nonatomic, assign) NSInteger  height;
+@property(nonatomic, copy, nullable) NSArray<PlaneWrapper *> * planes;
 @property(nonatomic, strong, nullable) CropRectWrapper * cropRect;
-@property(nonatomic, assign) AnalysisRotation rotation;
+@property(nonatomic, strong, nullable) AnalysisRotationBox * rotation;
 @end
 
-/// The codec used by AnalysisImageUtils.
-NSObject<FlutterMessageCodec> *AnalysisImageUtilsGetCodec(void);
+/// The codec used by all APIs.
+NSObject<FlutterMessageCodec> *nullGetPigeonCodec(void);
 
 @protocol AnalysisImageUtils
-- (void)nv21toJpegNv21Image:(AnalysisImageWrapper *)nv21Image jpegQuality:(NSNumber *)jpegQuality completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
-- (void)yuv420toJpegYuvImage:(AnalysisImageWrapper *)yuvImage jpegQuality:(NSNumber *)jpegQuality completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
+- (void)nv21toJpegNv21Image:(AnalysisImageWrapper *)nv21Image jpegQuality:(NSInteger)jpegQuality completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
+- (void)yuv420toJpegYuvImage:(AnalysisImageWrapper *)yuvImage jpegQuality:(NSInteger)jpegQuality completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
 - (void)yuv420toNv21YuvImage:(AnalysisImageWrapper *)yuvImage completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
-- (void)bgra8888toJpegBgra8888image:(AnalysisImageWrapper *)bgra8888image jpegQuality:(NSNumber *)jpegQuality completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
+- (void)bgra8888toJpegBgra8888image:(AnalysisImageWrapper *)bgra8888image jpegQuality:(NSInteger)jpegQuality completion:(void (^)(AnalysisImageWrapper *_Nullable, FlutterError *_Nullable))completion;
 @end
 
-extern void AnalysisImageUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AnalysisImageUtils> *_Nullable api);
+extern void SetUpAnalysisImageUtils(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AnalysisImageUtils> *_Nullable api);
+
+extern void SetUpAnalysisImageUtilsWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AnalysisImageUtils> *_Nullable api, NSString *messageChannelSuffix);
 
-/// The codec used by CameraInterface.
-NSObject<FlutterMessageCodec> *CameraInterfaceGetCodec(void);
 
 @protocol CameraInterface
-- (void)setupCameraSensors:(NSArray<PigeonSensor *> *)sensors aspectRatio:(NSString *)aspectRatio zoom:(NSNumber *)zoom mirrorFrontCamera:(NSNumber *)mirrorFrontCamera enablePhysicalButton:(NSNumber *)enablePhysicalButton flashMode:(NSString *)flashMode captureMode:(NSString *)captureMode enableImageStream:(NSNumber *)enableImageStream exifPreferences:(ExifPreferences *)exifPreferences videoOptions:(nullable VideoOptions *)videoOptions completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
+- (void)setupCameraSensors:(NSArray<PigeonSensor *> *)sensors aspectRatio:(NSString *)aspectRatio zoom:(double)zoom mirrorFrontCamera:(BOOL)mirrorFrontCamera enablePhysicalButton:(BOOL)enablePhysicalButton flashMode:(NSString *)flashMode captureMode:(NSString *)captureMode enableImageStream:(BOOL)enableImageStream exifPreferences:(ExifPreferences *)exifPreferences videoOptions:(nullable VideoOptions *)videoOptions completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
 /// @return `nil` only when `error != nil`.
 - (nullable NSArray<NSString *> *)checkPermissionsPermissions:(NSArray<NSString *> *)permissions error:(FlutterError *_Nullable *_Nonnull)error;
 /// Returns given [CamerAwesomePermission] list (as String). Location permission might be
 /// refused but the app should still be able to run.
-- (void)requestPermissionsSaveGpsLocation:(NSNumber *)saveGpsLocation completion:(void (^)(NSArray<NSString *> *_Nullable, FlutterError *_Nullable))completion;
+- (void)requestPermissionsSaveGpsLocation:(BOOL)saveGpsLocation completion:(void (^)(NSArray<NSString *> *_Nullable, FlutterError *_Nullable))completion;
 /// @return `nil` only when `error != nil`.
-- (nullable NSNumber *)getPreviewTextureIdCameraPosition:(NSNumber *)cameraPosition error:(FlutterError *_Nullable *_Nonnull)error;
+- (nullable NSNumber *)getPreviewTextureIdCameraPosition:(NSInteger)cameraPosition error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)takePhotoSensors:(NSArray<PigeonSensor *> *)sensors paths:(NSArray<NSString *> *)paths completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
 - (void)recordVideoSensors:(NSArray<PigeonSensor *> *)sensors paths:(NSArray<NSString *> *)paths completion:(void (^)(FlutterError *_Nullable))completion;
 - (void)pauseVideoRecordingWithError:(FlutterError *_Nullable *_Nonnull)error;
@@ -296,34 +353,36 @@ NSObject<FlutterMessageCodec> *CameraInterfaceGetCodec(void);
 ///
 /// On Android, you can control after how much time you want to switch back
 /// to passive focus mode with [androidFocusSettings].
-- (void)focusOnPointPreviewSize:(PreviewSize *)previewSize x:(NSNumber *)x y:(NSNumber *)y androidFocusSettings:(nullable AndroidFocusSettings *)androidFocusSettings error:(FlutterError *_Nullable *_Nonnull)error;
-- (void)setZoomZoom:(NSNumber *)zoom error:(FlutterError *_Nullable *_Nonnull)error;
-- (void)setMirrorFrontCameraMirror:(NSNumber *)mirror error:(FlutterError *_Nullable *_Nonnull)error;
+- (void)focusOnPointPreviewSize:(PreviewSize *)previewSize x:(double)x y:(double)y androidFocusSettings:(nullable AndroidFocusSettings *)androidFocusSettings error:(FlutterError *_Nullable *_Nonnull)error;
+- (void)setZoomZoom:(double)zoom error:(FlutterError *_Nullable *_Nonnull)error;
+- (void)setMirrorFrontCameraMirror:(BOOL)mirror error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)setSensorSensors:(NSArray<PigeonSensor *> *)sensors error:(FlutterError *_Nullable *_Nonnull)error;
-- (void)setCorrectionBrightness:(NSNumber *)brightness error:(FlutterError *_Nullable *_Nonnull)error;
+- (void)setCorrectionBrightness:(double)brightness error:(FlutterError *_Nullable *_Nonnull)error;
 /// @return `nil` only when `error != nil`.
 - (nullable NSNumber *)getMinZoomWithError:(FlutterError *_Nullable *_Nonnull)error;
 /// @return `nil` only when `error != nil`.
 - (nullable NSNumber *)getMaxZoomWithError:(FlutterError *_Nullable *_Nonnull)error;
 - (void)setCaptureModeMode:(NSString *)mode error:(FlutterError *_Nullable *_Nonnull)error;
-- (void)setRecordingAudioModeEnableAudio:(NSNumber *)enableAudio completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
+- (void)setRecordingAudioModeEnableAudio:(BOOL)enableAudio completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
 /// @return `nil` only when `error != nil`.
 - (nullable NSArray<PreviewSize *> *)availableSizesWithError:(FlutterError *_Nullable *_Nonnull)error;
 - (void)refreshWithError:(FlutterError *_Nullable *_Nonnull)error;
-- (nullable PreviewSize *)getEffectivPreviewSizeIndex:(NSNumber *)index error:(FlutterError *_Nullable *_Nonnull)error;
+- (nullable PreviewSize *)getEffectivPreviewSizeIndex:(NSInteger)index error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)setPhotoSizeSize:(PreviewSize *)size error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)setPreviewSizeSize:(PreviewSize *)size error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)setAspectRatioAspectRatio:(NSString *)aspectRatio error:(FlutterError *_Nullable *_Nonnull)error;
-- (void)setupImageAnalysisStreamFormat:(NSString *)format width:(NSNumber *)width maxFramesPerSecond:(nullable NSNumber *)maxFramesPerSecond autoStart:(NSNumber *)autoStart error:(FlutterError *_Nullable *_Nonnull)error;
+- (void)setupImageAnalysisStreamFormat:(NSString *)format width:(NSInteger)width maxFramesPerSecond:(nullable NSNumber *)maxFramesPerSecond autoStart:(BOOL)autoStart error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)setExifPreferencesExifPreferences:(ExifPreferences *)exifPreferences completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
 - (void)startAnalysisWithError:(FlutterError *_Nullable *_Nonnull)error;
 - (void)stopAnalysisWithError:(FlutterError *_Nullable *_Nonnull)error;
-- (void)setFilterMatrix:(NSArray<NSNumber *> *)matrix error:(FlutterError *_Nullable *_Nonnull)error;
+- (void)setFilterMatrix:(NSArray<double> *)matrix error:(FlutterError *_Nullable *_Nonnull)error;
 - (void)isVideoRecordingAndImageAnalysisSupportedSensor:(PigeonSensorPosition)sensor completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
 /// @return `nil` only when `error != nil`.
 - (nullable NSNumber *)isMultiCamSupportedWithError:(FlutterError *_Nullable *_Nonnull)error;
 @end
 
-extern void CameraInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraInterface> *_Nullable api);
+extern void SetUpCameraInterface(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraInterface> *_Nullable api);
+
+extern void SetUpCameraInterfaceWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraInterface> *_Nullable api, NSString *messageChannelSuffix);
 
 NS_ASSUME_NONNULL_END
diff --git a/lib/pigeon.dart b/lib/pigeon.dart
index bffdfa9..a3b7ca9 100644
--- a/lib/pigeon.dart
+++ b/lib/pigeon.dart
@@ -1,6 +1,6 @@
-// Autogenerated from Pigeon (v9.2.5), do not edit directly.
+// Autogenerated from Pigeon (v21.2.0), do not edit directly.
 // See also: https://pub.dev/packages/pigeon
-// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
+// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers
 
 import 'dart:async';
 import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
@@ -8,6 +8,13 @@ import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
 import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
 import 'package:flutter/services.dart';
 
+PlatformException _createConnectionError(String channelName) {
+  return PlatformException(
+    code: 'channel-error',
+    message: 'Unable to establish connection on channel: "$channelName".',
+  );
+}
+
 enum PigeonSensorPosition {
   back,
   front,
@@ -62,13 +69,10 @@ enum PigeonSensorType {
   ///
   /// The wide angle sensor is the default sensor for iOS
   wideAngle,
-
   /// A built-in camera with a shorter focal length than that of the wide-angle camera.
   ultraWideAngle,
-
   /// A built-in camera device with a longer focal length than the wide-angle camera.
   telephoto,
-
   /// A device that consists of two cameras, one Infrared and one YUV.
   ///
   /// iOS only
@@ -80,7 +84,7 @@ enum CamerAwesomePermission {
   storage,
   camera,
   location,
-  recordAudio,
+  record_audio,
 }
 
 enum AnalysisImageFormat {
@@ -122,14 +126,6 @@ class PreviewSize {
       height: result[1]! as double,
     );
   }
-
-  Size toSize() => Size(width, height);
-
-  /// Returns a new [PreviewSize] with [width] and [height] inverted.
-  /// Useful when the preview size is given in portrait mode but the camera
-  /// is in landscape mode.
-  /// Ex : for tablets, the preview size is given in landscape mode but the device is in portrait mode.
-  inverted() => PreviewSize(width: height, height: width);
 }
 
 class ExifPreferences {
@@ -168,8 +164,8 @@ class PigeonSensor {
 
   Object encode() {
     return <Object?>[
-      position.index,
-      type.index,
+      position,
+      type,
       deviceId,
     ];
   }
@@ -177,8 +173,8 @@ class PigeonSensor {
   static PigeonSensor decode(Object result) {
     result as List<Object?>;
     return PigeonSensor(
-      position: PigeonSensorPosition.values[result[0]! as int],
-      type: PigeonSensorType.values[result[1]! as int],
+      position: result[0]! as PigeonSensorPosition,
+      type: result[1]! as PigeonSensorType,
       deviceId: result[2] as String?,
     );
   }
@@ -206,9 +202,9 @@ class VideoOptions {
   Object encode() {
     return <Object?>[
       enableAudio,
-      quality?.index,
-      android?.encode(),
-      ios?.encode(),
+      quality,
+      android,
+      ios,
     ];
   }
 
@@ -216,15 +212,9 @@ class VideoOptions {
     result as List<Object?>;
     return VideoOptions(
       enableAudio: result[0]! as bool,
-      quality: result[1] != null
-          ? VideoRecordingQuality.values[result[1]! as int]
-          : null,
-      android: result[2] != null
-          ? AndroidVideoOptions.decode(result[2]! as List<Object?>)
-          : null,
-      ios: result[3] != null
-          ? CupertinoVideoOptions.decode(result[3]! as List<Object?>)
-          : null,
+      quality: result[1] as VideoRecordingQuality?,
+      android: result[2] as AndroidVideoOptions?,
+      ios: result[3] as CupertinoVideoOptions?,
     );
   }
 }
@@ -244,7 +234,7 @@ class AndroidVideoOptions {
   Object encode() {
     return <Object?>[
       bitrate,
-      fallbackStrategy?.index,
+      fallbackStrategy,
     ];
   }
 
@@ -252,9 +242,7 @@ class AndroidVideoOptions {
     result as List<Object?>;
     return AndroidVideoOptions(
       bitrate: result[0] as int?,
-      fallbackStrategy: result[1] != null
-          ? QualityFallbackStrategy.values[result[1]! as int]
-          : null,
+      fallbackStrategy: result[1] as QualityFallbackStrategy?,
     );
   }
 }
@@ -264,6 +252,7 @@ class CupertinoVideoOptions {
     this.fileType,
     this.codec,
     this.fps,
+    this.colorSpace,
   });
 
   /// Specify video file type, defaults to [AVFileTypeQuickTimeMovie].
@@ -275,24 +264,25 @@ class CupertinoVideoOptions {
   /// Specify video fps, defaults to [30].
   int? fps;
 
+  /// Specify video color space, defaults to [AVVideoColorSpaceSRGB].
+  int? colorSpace;
+
   Object encode() {
     return <Object?>[
-      fileType?.index,
-      codec?.index,
+      fileType,
+      codec,
       fps,
+      colorSpace,
     ];
   }
 
   static CupertinoVideoOptions decode(Object result) {
     result as List<Object?>;
     return CupertinoVideoOptions(
-      fileType: result[0] != null
-          ? CupertinoFileType.values[result[0]! as int]
-          : null,
-      codec: result[1] != null
-          ? CupertinoCodecType.values[result[1]! as int]
-          : null,
+      fileType: result[0] as CupertinoFileType?,
+      codec: result[1] as CupertinoCodecType?,
       fps: result[2] as int?,
+      colorSpace: result[3] as int?,
     );
   }
 }
@@ -322,7 +312,7 @@ class PigeonSensorTypeDevice {
 
   Object encode() {
     return <Object?>[
-      sensorType.index,
+      sensorType,
       name,
       iso,
       flashAvailable,
@@ -333,7 +323,7 @@ class PigeonSensorTypeDevice {
   static PigeonSensorTypeDevice decode(Object result) {
     result as List<Object?>;
     return PigeonSensorTypeDevice(
-      sensorType: PigeonSensorType.values[result[0]! as int],
+      sensorType: result[0]! as PigeonSensorType,
       name: result[1]! as String,
       iso: result[2]! as double,
       flashAvailable: result[3]! as bool,
@@ -473,46 +463,94 @@ class AnalysisImageWrapper {
 
   Object encode() {
     return <Object?>[
-      format.index,
+      format,
       bytes,
       width,
       height,
       planes,
-      cropRect?.encode(),
-      rotation?.index,
+      cropRect,
+      rotation,
     ];
   }
 
   static AnalysisImageWrapper decode(Object result) {
     result as List<Object?>;
     return AnalysisImageWrapper(
-      format: AnalysisImageFormat.values[result[0]! as int],
+      format: result[0]! as AnalysisImageFormat,
       bytes: result[1] as Uint8List?,
       width: result[2]! as int,
       height: result[3]! as int,
       planes: (result[4] as List<Object?>?)?.cast<PlaneWrapper?>(),
-      cropRect: result[5] != null
-          ? CropRectWrapper.decode(result[5]! as List<Object?>)
-          : null,
-      rotation:
-          result[6] != null ? AnalysisRotation.values[result[6]! as int] : null,
+      cropRect: result[5] as CropRectWrapper?,
+      rotation: result[6] as AnalysisRotation?,
     );
   }
 }
 
-class _AnalysisImageUtilsCodec extends StandardMessageCodec {
-  const _AnalysisImageUtilsCodec();
 
+class _PigeonCodec extends StandardMessageCodec {
+  const _PigeonCodec();
   @override
   void writeValue(WriteBuffer buffer, Object? value) {
-    if (value is AnalysisImageWrapper) {
-      buffer.putUint8(128);
-      writeValue(buffer, value.encode());
-    } else if (value is CropRectWrapper) {
+    if (value is PigeonSensorPosition) {
       buffer.putUint8(129);
-      writeValue(buffer, value.encode());
-    } else if (value is PlaneWrapper) {
+      writeValue(buffer, value.index);
+    } else     if (value is VideoRecordingQuality) {
       buffer.putUint8(130);
+      writeValue(buffer, value.index);
+    } else     if (value is QualityFallbackStrategy) {
+      buffer.putUint8(131);
+      writeValue(buffer, value.index);
+    } else     if (value is CupertinoFileType) {
+      buffer.putUint8(132);
+      writeValue(buffer, value.index);
+    } else     if (value is CupertinoCodecType) {
+      buffer.putUint8(133);
+      writeValue(buffer, value.index);
+    } else     if (value is PigeonSensorType) {
+      buffer.putUint8(134);
+      writeValue(buffer, value.index);
+    } else     if (value is CamerAwesomePermission) {
+      buffer.putUint8(135);
+      writeValue(buffer, value.index);
+    } else     if (value is AnalysisImageFormat) {
+      buffer.putUint8(136);
+      writeValue(buffer, value.index);
+    } else     if (value is AnalysisRotation) {
+      buffer.putUint8(137);
+      writeValue(buffer, value.index);
+    } else     if (value is PreviewSize) {
+      buffer.putUint8(138);
+      writeValue(buffer, value.encode());
+    } else     if (value is ExifPreferences) {
+      buffer.putUint8(139);
+      writeValue(buffer, value.encode());
+    } else     if (value is PigeonSensor) {
+      buffer.putUint8(140);
+      writeValue(buffer, value.encode());
+    } else     if (value is VideoOptions) {
+      buffer.putUint8(141);
+      writeValue(buffer, value.encode());
+    } else     if (value is AndroidVideoOptions) {
+      buffer.putUint8(142);
+      writeValue(buffer, value.encode());
+    } else     if (value is CupertinoVideoOptions) {
+      buffer.putUint8(143);
+      writeValue(buffer, value.encode());
+    } else     if (value is PigeonSensorTypeDevice) {
+      buffer.putUint8(144);
+      writeValue(buffer, value.encode());
+    } else     if (value is AndroidFocusSettings) {
+      buffer.putUint8(145);
+      writeValue(buffer, value.encode());
+    } else     if (value is PlaneWrapper) {
+      buffer.putUint8(146);
+      writeValue(buffer, value.encode());
+    } else     if (value is CropRectWrapper) {
+      buffer.putUint8(147);
+      writeValue(buffer, value.encode());
+    } else     if (value is AnalysisImageWrapper) {
+      buffer.putUint8(148);
       writeValue(buffer, value.encode());
     } else {
       super.writeValue(buffer, value);
@@ -522,12 +560,55 @@ class _AnalysisImageUtilsCodec extends StandardMessageCodec {
   @override
   Object? readValueOfType(int type, ReadBuffer buffer) {
     switch (type) {
-      case 128:
-        return AnalysisImageWrapper.decode(readValue(buffer)!);
-      case 129:
-        return CropRectWrapper.decode(readValue(buffer)!);
-      case 130:
+      case 129: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : PigeonSensorPosition.values[value];
+      case 130: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : VideoRecordingQuality.values[value];
+      case 131: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : QualityFallbackStrategy.values[value];
+      case 132: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : CupertinoFileType.values[value];
+      case 133: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : CupertinoCodecType.values[value];
+      case 134: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : PigeonSensorType.values[value];
+      case 135: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : CamerAwesomePermission.values[value];
+      case 136: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : AnalysisImageFormat.values[value];
+      case 137: 
+        final int? value = readValue(buffer) as int?;
+        return value == null ? null : AnalysisRotation.values[value];
+      case 138: 
+        return PreviewSize.decode(readValue(buffer)!);
+      case 139: 
+        return ExifPreferences.decode(readValue(buffer)!);
+      case 140: 
+        return PigeonSensor.decode(readValue(buffer)!);
+      case 141: 
+        return VideoOptions.decode(readValue(buffer)!);
+      case 142: 
+        return AndroidVideoOptions.decode(readValue(buffer)!);
+      case 143: 
+        return CupertinoVideoOptions.decode(readValue(buffer)!);
+      case 144: 
+        return PigeonSensorTypeDevice.decode(readValue(buffer)!);
+      case 145: 
+        return AndroidFocusSettings.decode(readValue(buffer)!);
+      case 146: 
         return PlaneWrapper.decode(readValue(buffer)!);
+      case 147: 
+        return CropRectWrapper.decode(readValue(buffer)!);
+      case 148: 
+        return AnalysisImageWrapper.decode(readValue(buffer)!);
       default:
         return super.readValueOfType(type, buffer);
     }
@@ -538,185 +619,120 @@ class AnalysisImageUtils {
   /// Constructor for [AnalysisImageUtils].  The [binaryMessenger] named argument is
   /// available for dependency injection.  If it is left null, the default
   /// BinaryMessenger will be used which routes to the host platform.
-  AnalysisImageUtils({BinaryMessenger? binaryMessenger})
-      : _binaryMessenger = binaryMessenger;
-  final BinaryMessenger? _binaryMessenger;
-
-  static const MessageCodec<Object?> codec = _AnalysisImageUtilsCodec();
-
-  Future<AnalysisImageWrapper> nv21toJpeg(
-      AnalysisImageWrapper arg_nv21Image, int arg_jpegQuality) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.AnalysisImageUtils.nv21toJpeg', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel
-        .send(<Object?>[arg_nv21Image, arg_jpegQuality]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  AnalysisImageUtils({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
+      : pigeonVar_binaryMessenger = binaryMessenger,
+        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
+  final BinaryMessenger? pigeonVar_binaryMessenger;
+
+  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
+
+  final String pigeonVar_messageChannelSuffix;
+
+  Future<AnalysisImageWrapper> nv21toJpeg(AnalysisImageWrapper nv21Image, int jpegQuality) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.AnalysisImageUtils.nv21toJpeg$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[nv21Image, jpegQuality]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as AnalysisImageWrapper?)!;
+      return (pigeonVar_replyList[0] as AnalysisImageWrapper?)!;
     }
   }
 
-  Future<AnalysisImageWrapper> yuv420toJpeg(
-      AnalysisImageWrapper arg_yuvImage, int arg_jpegQuality) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.AnalysisImageUtils.yuv420toJpeg', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel
-        .send(<Object?>[arg_yuvImage, arg_jpegQuality]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<AnalysisImageWrapper> yuv420toJpeg(AnalysisImageWrapper yuvImage, int jpegQuality) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.AnalysisImageUtils.yuv420toJpeg$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[yuvImage, jpegQuality]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as AnalysisImageWrapper?)!;
+      return (pigeonVar_replyList[0] as AnalysisImageWrapper?)!;
     }
   }
 
-  Future<AnalysisImageWrapper> yuv420toNv21(
-      AnalysisImageWrapper arg_yuvImage) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.AnalysisImageUtils.yuv420toNv21', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_yuvImage]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<AnalysisImageWrapper> yuv420toNv21(AnalysisImageWrapper yuvImage) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.AnalysisImageUtils.yuv420toNv21$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[yuvImage]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as AnalysisImageWrapper?)!;
+      return (pigeonVar_replyList[0] as AnalysisImageWrapper?)!;
     }
   }
 
-  Future<AnalysisImageWrapper> bgra8888toJpeg(
-      AnalysisImageWrapper arg_bgra8888image, int arg_jpegQuality) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.AnalysisImageUtils.bgra8888toJpeg', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel
-        .send(<Object?>[arg_bgra8888image, arg_jpegQuality]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<AnalysisImageWrapper> bgra8888toJpeg(AnalysisImageWrapper bgra8888image, int jpegQuality) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.AnalysisImageUtils.bgra8888toJpeg$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[bgra8888image, jpegQuality]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as AnalysisImageWrapper?)!;
-    }
-  }
-}
-
-class _CameraInterfaceCodec extends StandardMessageCodec {
-  const _CameraInterfaceCodec();
-
-  @override
-  void writeValue(WriteBuffer buffer, Object? value) {
-    if (value is AndroidFocusSettings) {
-      buffer.putUint8(128);
-      writeValue(buffer, value.encode());
-    } else if (value is AndroidVideoOptions) {
-      buffer.putUint8(129);
-      writeValue(buffer, value.encode());
-    } else if (value is CupertinoVideoOptions) {
-      buffer.putUint8(130);
-      writeValue(buffer, value.encode());
-    } else if (value is ExifPreferences) {
-      buffer.putUint8(131);
-      writeValue(buffer, value.encode());
-    } else if (value is PigeonSensor) {
-      buffer.putUint8(132);
-      writeValue(buffer, value.encode());
-    } else if (value is PigeonSensorTypeDevice) {
-      buffer.putUint8(133);
-      writeValue(buffer, value.encode());
-    } else if (value is PreviewSize) {
-      buffer.putUint8(134);
-      writeValue(buffer, value.encode());
-    } else if (value is PreviewSize) {
-      buffer.putUint8(135);
-      writeValue(buffer, value.encode());
-    } else if (value is VideoOptions) {
-      buffer.putUint8(136);
-      writeValue(buffer, value.encode());
-    } else {
-      super.writeValue(buffer, value);
-    }
-  }
-
-  @override
-  Object? readValueOfType(int type, ReadBuffer buffer) {
-    switch (type) {
-      case 128:
-        return AndroidFocusSettings.decode(readValue(buffer)!);
-      case 129:
-        return AndroidVideoOptions.decode(readValue(buffer)!);
-      case 130:
-        return CupertinoVideoOptions.decode(readValue(buffer)!);
-      case 131:
-        return ExifPreferences.decode(readValue(buffer)!);
-      case 132:
-        return PigeonSensor.decode(readValue(buffer)!);
-      case 133:
-        return PigeonSensorTypeDevice.decode(readValue(buffer)!);
-      case 134:
-        return PreviewSize.decode(readValue(buffer)!);
-      case 135:
-        return PreviewSize.decode(readValue(buffer)!);
-      case 136:
-        return VideoOptions.decode(readValue(buffer)!);
-      default:
-        return super.readValueOfType(type, buffer);
+      return (pigeonVar_replyList[0] as AnalysisImageWrapper?)!;
     }
   }
 }
@@ -725,187 +741,168 @@ class CameraInterface {
   /// Constructor for [CameraInterface].  The [binaryMessenger] named argument is
   /// available for dependency injection.  If it is left null, the default
   /// BinaryMessenger will be used which routes to the host platform.
-  CameraInterface({BinaryMessenger? binaryMessenger})
-      : _binaryMessenger = binaryMessenger;
-  final BinaryMessenger? _binaryMessenger;
-
-  static const MessageCodec<Object?> codec = _CameraInterfaceCodec();
-
-  Future<bool> setupCamera(
-      List<PigeonSensor?> arg_sensors,
-      String arg_aspectRatio,
-      double arg_zoom,
-      bool arg_mirrorFrontCamera,
-      bool arg_enablePhysicalButton,
-      String arg_flashMode,
-      String arg_captureMode,
-      bool arg_enableImageStream,
-      ExifPreferences arg_exifPreferences,
-      VideoOptions? arg_videoOptions) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setupCamera', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(<Object?>[
-      arg_sensors,
-      arg_aspectRatio,
-      arg_zoom,
-      arg_mirrorFrontCamera,
-      arg_enablePhysicalButton,
-      arg_flashMode,
-      arg_captureMode,
-      arg_enableImageStream,
-      arg_exifPreferences,
-      arg_videoOptions
-    ]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  CameraInterface({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
+      : pigeonVar_binaryMessenger = binaryMessenger,
+        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
+  final BinaryMessenger? pigeonVar_binaryMessenger;
+
+  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
+
+  final String pigeonVar_messageChannelSuffix;
+
+  Future<bool> setupCamera(List<PigeonSensor?> sensors, String aspectRatio, double zoom, bool mirrorFrontCamera, bool enablePhysicalButton, String flashMode, String captureMode, bool enableImageStream, ExifPreferences exifPreferences, VideoOptions? videoOptions) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setupCamera$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[sensors, aspectRatio, zoom, mirrorFrontCamera, enablePhysicalButton, flashMode, captureMode, enableImageStream, exifPreferences, videoOptions]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
-  Future<List<String?>> checkPermissions(List<String?> arg_permissions) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.checkPermissions', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_permissions]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<List<String?>> checkPermissions(List<String?> permissions) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.checkPermissions$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[permissions]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as List<Object?>?)!.cast<String?>();
+      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String?>();
     }
   }
 
   /// Returns given [CamerAwesomePermission] list (as String). Location permission might be
   /// refused but the app should still be able to run.
-  Future<List<String?>> requestPermissions(bool arg_saveGpsLocation) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.requestPermissions', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_saveGpsLocation]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<List<String?>> requestPermissions(bool saveGpsLocation) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.requestPermissions$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[saveGpsLocation]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as List<Object?>?)!.cast<String?>();
+      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String?>();
     }
   }
 
-  Future<int> getPreviewTextureId(int arg_cameraPosition) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.getPreviewTextureId', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_cameraPosition]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<int> getPreviewTextureId(int cameraPosition) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.getPreviewTextureId$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[cameraPosition]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as int?)!;
+      return (pigeonVar_replyList[0] as int?)!;
     }
   }
 
-  Future<bool> takePhoto(
-      List<PigeonSensor?> arg_sensors, List<String?> arg_paths) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.takePhoto', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_sensors, arg_paths]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<bool> takePhoto(List<PigeonSensor?> sensors, List<String?> paths) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.takePhoto$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[sensors, paths]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
-  Future<void> recordVideo(
-      List<PigeonSensor?> arg_sensors, List<String?> arg_paths) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.recordVideo', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_sensors, arg_paths]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> recordVideo(List<PigeonSensor?> sensors, List<String?> paths) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.recordVideo$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[sensors, paths]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -913,20 +910,21 @@ class CameraInterface {
   }
 
   Future<void> pauseVideoRecording() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.pauseVideoRecording', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.pauseVideoRecording$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -934,20 +932,21 @@ class CameraInterface {
   }
 
   Future<void> resumeVideoRecording() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.resumeVideoRecording', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.resumeVideoRecording$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -955,20 +954,21 @@ class CameraInterface {
   }
 
   Future<void> receivedImageFromStream() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.receivedImageFromStream', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.receivedImageFromStream$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -976,151 +976,156 @@ class CameraInterface {
   }
 
   Future<bool> stopRecordingVideo() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.stopRecordingVideo', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.stopRecordingVideo$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
   Future<List<PigeonSensorTypeDevice?>> getFrontSensors() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.getFrontSensors', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.getFrontSensors$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as List<Object?>?)!.cast<PigeonSensorTypeDevice?>();
+      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PigeonSensorTypeDevice?>();
     }
   }
 
   Future<List<PigeonSensorTypeDevice?>> getBackSensors() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.getBackSensors', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.getBackSensors$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as List<Object?>?)!.cast<PigeonSensorTypeDevice?>();
+      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PigeonSensorTypeDevice?>();
     }
   }
 
   Future<bool> start() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.start', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.start$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
   Future<bool> stop() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.stop', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.stop$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
-  Future<void> setFlashMode(String arg_mode) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setFlashMode', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_mode]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setFlashMode(String mode) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setFlashMode$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[mode]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -1128,20 +1133,21 @@ class CameraInterface {
   }
 
   Future<void> handleAutoFocus() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.handleAutoFocus', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.handleAutoFocus$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -1152,112 +1158,110 @@ class CameraInterface {
   ///
   /// On Android, you can control after how much time you want to switch back
   /// to passive focus mode with [androidFocusSettings].
-  Future<void> focusOnPoint(PreviewSize arg_previewSize, double arg_x,
-      double arg_y, AndroidFocusSettings? arg_androidFocusSettings) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.focusOnPoint', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(
-            <Object?>[arg_previewSize, arg_x, arg_y, arg_androidFocusSettings])
-        as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> focusOnPoint(PreviewSize previewSize, double x, double y, AndroidFocusSettings? androidFocusSettings) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.focusOnPoint$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[previewSize, x, y, androidFocusSettings]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setZoom(double arg_zoom) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setZoom', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_zoom]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setZoom(double zoom) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setZoom$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[zoom]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setMirrorFrontCamera(bool arg_mirror) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setMirrorFrontCamera', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_mirror]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setMirrorFrontCamera(bool mirror) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setMirrorFrontCamera$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[mirror]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setSensor(List<PigeonSensor?> arg_sensors) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setSensor', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_sensors]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setSensor(List<PigeonSensor?> sensors) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setSensor$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[sensors]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setCorrection(double arg_brightness) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setCorrection', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_brightness]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setCorrection(double brightness) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setCorrection$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[brightness]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -1265,310 +1269,310 @@ class CameraInterface {
   }
 
   Future<double> getMinZoom() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.getMinZoom', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.getMinZoom$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as double?)!;
+      return (pigeonVar_replyList[0] as double?)!;
     }
   }
 
   Future<double> getMaxZoom() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.getMaxZoom', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.getMaxZoom$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as double?)!;
+      return (pigeonVar_replyList[0] as double?)!;
     }
   }
 
-  Future<void> setCaptureMode(String arg_mode) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setCaptureMode', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_mode]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setCaptureMode(String mode) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setCaptureMode$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[mode]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<bool> setRecordingAudioMode(bool arg_enableAudio) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setRecordingAudioMode', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_enableAudio]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<bool> setRecordingAudioMode(bool enableAudio) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setRecordingAudioMode$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[enableAudio]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
   Future<List<PreviewSize?>> availableSizes() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.availableSizes', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.availableSizes$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as List<Object?>?)!.cast<PreviewSize?>();
+      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PreviewSize?>();
     }
   }
 
   Future<void> refresh() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.refresh', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.refresh$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<PreviewSize?> getEffectivPreviewSize(int arg_index) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.getEffectivPreviewSize', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_index]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<PreviewSize?> getEffectivPreviewSize(int index) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.getEffectivPreviewSize$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[index]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
-      return (replyList[0] as PreviewSize?);
+      return (pigeonVar_replyList[0] as PreviewSize?);
     }
   }
 
-  Future<void> setPhotoSize(PreviewSize arg_size) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setPhotoSize', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_size]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setPhotoSize(PreviewSize size) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setPhotoSize$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[size]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setPreviewSize(PreviewSize arg_size) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setPreviewSize', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_size]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setPreviewSize(PreviewSize size) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setPreviewSize$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[size]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setAspectRatio(String arg_aspectRatio) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setAspectRatio', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_aspectRatio]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setAspectRatio(String aspectRatio) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setAspectRatio$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[aspectRatio]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setupImageAnalysisStream(String arg_format, int arg_width,
-      double? arg_maxFramesPerSecond, bool arg_autoStart) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setupImageAnalysisStream', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(<Object?>[
-      arg_format,
-      arg_width,
-      arg_maxFramesPerSecond,
-      arg_autoStart
-    ]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setupImageAnalysisStream(String format, int width, double? maxFramesPerSecond, bool autoStart) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setupImageAnalysisStream$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[format, width, maxFramesPerSecond, autoStart]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<bool> setExifPreferences(ExifPreferences arg_exifPreferences) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setExifPreferences', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_exifPreferences]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<bool> setExifPreferences(ExifPreferences exifPreferences) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setExifPreferences$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[exifPreferences]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
   Future<void> startAnalysis() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.startAnalysis', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.startAnalysis$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
@@ -1576,100 +1580,100 @@ class CameraInterface {
   }
 
   Future<void> stopAnalysis() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.stopAnalysis', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.stopAnalysis$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<void> setFilter(List<double?> arg_matrix) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.setFilter', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_matrix]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<void> setFilter(List<double?> matrix) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.setFilter$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[matrix]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
     } else {
       return;
     }
   }
 
-  Future<bool> isVideoRecordingAndImageAnalysisSupported(
-      PigeonSensorPosition arg_sensor) async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.isVideoRecordingAndImageAnalysisSupported',
-        codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_sensor.index]) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+  Future<bool> isVideoRecordingAndImageAnalysisSupported(PigeonSensorPosition sensor) async {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.isVideoRecordingAndImageAnalysisSupported$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(<Object?>[sensor]) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 
   Future<bool> isMultiCamSupported() async {
-    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
-        'dev.flutter.pigeon.CameraInterface.isMultiCamSupported', codec,
-        binaryMessenger: _binaryMessenger);
-    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
-    if (replyList == null) {
-      throw PlatformException(
-        code: 'channel-error',
-        message: 'Unable to establish connection on channel.',
-      );
-    } else if (replyList.length > 1) {
+    final String pigeonVar_channelName = 'dev.flutter.pigeon.camerawesome.CameraInterface.isMultiCamSupported$pigeonVar_messageChannelSuffix';
+    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
+      pigeonVar_channelName,
+      pigeonChannelCodec,
+      binaryMessenger: pigeonVar_binaryMessenger,
+    );
+    final List<Object?>? pigeonVar_replyList =
+        await pigeonVar_channel.send(null) as List<Object?>?;
+    if (pigeonVar_replyList == null) {
+      throw _createConnectionError(pigeonVar_channelName);
+    } else if (pigeonVar_replyList.length > 1) {
       throw PlatformException(
-        code: replyList[0]! as String,
-        message: replyList[1] as String?,
-        details: replyList[2],
+        code: pigeonVar_replyList[0]! as String,
+        message: pigeonVar_replyList[1] as String?,
+        details: pigeonVar_replyList[2],
       );
-    } else if (replyList[0] == null) {
+    } else if (pigeonVar_replyList[0] == null) {
       throw PlatformException(
         code: 'null-error',
         message: 'Host platform returned null value for non-null return value.',
       );
     } else {
-      return (replyList[0] as bool?)!;
+      return (pigeonVar_replyList[0] as bool?)!;
     }
   }
 }
diff --git a/lib/src/orchestrator/models/video_options.dart b/lib/src/orchestrator/models/video_options.dart
index d389e84..c3a9746 100644
--- a/lib/src/orchestrator/models/video_options.dart
+++ b/lib/src/orchestrator/models/video_options.dart
@@ -65,10 +65,14 @@ class CupertinoVideoOptions {
 
   int? fps;
 
+  /// The color space to use when recording a video.
+  int? colorSpace;
+
   CupertinoVideoOptions({
     this.codec = CupertinoVideoCodec.h264,
     this.fileType = CupertinoFileType.quickTimeMovie,
     this.fps,
+    this.colorSpace,
   });
 
   Map<String, dynamic> toMap() {
@@ -76,6 +80,7 @@ class CupertinoVideoOptions {
       'codec': codec.name,
       'fileType': fileType.name,
       'fps': fps,
+      'colorSpace': colorSpace,
     };
   }
 }
diff --git a/lib/src/widgets/utils/awesome_oriented_widget.dart b/lib/src/widgets/utils/awesome_oriented_widget.dart
index bf149e5..fb4cfae 100644
--- a/lib/src/widgets/utils/awesome_oriented_widget.dart
+++ b/lib/src/widgets/utils/awesome_oriented_widget.dart
@@ -27,7 +27,9 @@ class AwesomeOrientedWidgetState extends State<AwesomeOrientedWidget> {
       return StreamBuilder<CameraOrientations>(
         stream: CamerawesomePlugin.getNativeOrientation(),
         builder: (_, orientationSnapshot) {
-          final orientation = orientationSnapshot.data;
+          final orientation =
+              orientationSnapshot.data ??
+              CameraOrientations.landscape_right; // Default to portrait up
           if (orientation != null && orientation != previousOrientation) {
             turns = shortestTurnsToReachTarget(
               current: turns,
@@ -67,8 +69,10 @@ class AwesomeOrientedWidgetState extends State<AwesomeOrientedWidget> {
   ///
   /// E.g: when being at 0.5 turns, should I go to 0.75 or to -0.25 to minimize
   /// the rotation ?
-  double shortestTurnsToReachTarget(
-      {required double current, required double target}) {
+  double shortestTurnsToReachTarget({
+    required double current,
+    required double target,
+  }) {
     final currentDegree = current * 360;
     final targetDegree = target * 360;
 
diff --git a/pigeons/interface.dart b/pigeons/interface.dart
index 34c9334..72e646e 100644
--- a/pigeons/interface.dart
+++ b/pigeons/interface.dart
@@ -122,10 +122,14 @@ class CupertinoVideoOptions {
   /// Specify video fps, defaults to [30].
   final int? fps;
 
+  /// Specify video color space, defaults to [AVVideoColorSpaceSRGB].
+  final int? colorSpace;
+
   CupertinoVideoOptions({
     this.fileType,
     this.codec,
     this.fps,
+    this.colorSpace,
   });
 }
 
diff --git a/pigeons/pigeon.sh b/pigeons/pigeon.sh
index fc680ec..59f6470 100755
--- a/pigeons/pigeon.sh
+++ b/pigeons/pigeon.sh
@@ -1,7 +1,7 @@
-flutter pub run pigeon \
+dart run pigeon \
   --input pigeons/interface.dart \
   --dart_out lib/pigeon.dart \
   --experimental_kotlin_out ./android/src/main/kotlin/com/apparence/camerawesome/cameraX/Pigeon.kt \
   --experimental_kotlin_package "com.apparence.camerawesome.cameraX" \
-  --objc_source_out ./ios/Sources/camerawesome/Pigeon/Pigeon.m \
-  --objc_header_out ./ios/Sources/camerawesome/include/Pigeon.h \
\ No newline at end of file
+  --objc_source_out ./ios/camerawesome/Sources/camerawesome/Pigeon/Pigeon.m \
+  --objc_header_out ./ios/camerawesome/Sources/camerawesome/include/Pigeon.h \
\ No newline at end of file
